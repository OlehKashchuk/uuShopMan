{
  "info": {
    "_postman_id": "4d4f19c2-b565-4466-ba71-f457000816ef",
    "name": "uuShopMan",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Token",
      "item": [
        {
          "name": "grandToken",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "75c4036a-7c00-4d8d-867c-de46f5f12c59",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var data = JSON.parse(responseBody);\r",
                  "pm.environment.set(\"token\", data.id_token);\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "f5d2cfbe-2297-4098-ae81-8f39074c166f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "https://uuidentity.plus4u.net/uu-oidc-maing02/bb977a99f4cc4c37a2afce3fd599d0a7/oidc/grantToken?grant_type=password&username=HwdK65vtB&password=K8QjhgNr9N&scope=openid https://uuapp.plus4u.net/uu-shopman-maing05/85fbea48a4e541fc8c654064cdd14798/",
              "protocol": "https",
              "host": [
                "uuidentity",
                "plus4u",
                "net"
              ],
              "path": [
                "uu-oidc-maing02",
                "bb977a99f4cc4c37a2afce3fd599d0a7",
                "oidc",
                "grantToken"
              ],
              "query": [
                {
                  "key": "grant_type",
                  "value": "password"
                },
                {
                  "key": "username",
                  "value": "HwdK65vtB"
                },
                {
                  "key": "password",
                  "value": "K8QjhgNr9N"
                },
                {
                  "key": "scope",
                  "value": "openid https://uuapp.plus4u.net/uu-shopman-maing05/85fbea48a4e541fc8c654064cdd14798/"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "id": "34b974a4-95a3-4bfc-8ee3-78f9639c52c4"
    },
    {
      "name": "UuShopMan",
      "item": [
        {
          "name": "uuSubAppInstance/load",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "uuSubAppInstance/load",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",()=>  {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that  uuAppErrorMap is empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"uuShopManRevision\",jsonData.sys.rev);\r",
                          "pm.environment.set(\"defaultLanguage\",jsonData.defaultLanguage);"
                        ],
                        "type": "text/javascript",
                        "id": "6d888d7b-bb24-4565-a3fc-6b005f11dd89"
                      }
                    }
                  ],
                  "id": "18522634-48ad-4392-901d-93f417b7b88f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/uuSubAppInstance/load"
                  },
                  "response": []
                }
              ],
              "id": "e5c438a7-cdc4-441c-a2e8-d37f69a3d68b"
            }
          ],
          "id": "73cd17d0-c722-4083-b301-de4f2a439491"
        },
        {
          "name": "uuShopMan/update",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "uuShopMan/update",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "81d2688a-249e-4a47-9458-146b4c4a359e",
                        "exec": [
                          "let  jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",()=> {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that  uuAppErrorMap is empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"uuShopManRevision\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "cad4fe23-dad3-48b3-ac6b-041f17ab7a85",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{   \r\n    \"revision\":\"{{uuShopManRevision}}\",\r\n     \"countryCode\": \"CZE\"\r\n   \r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "https://uuapp.plus4u.net/uu-shopman-maing05/e06fbb441c1f44e28c1022e2d8701d63/uuShopMan/update"
                  },
                  "response": []
                }
              ],
              "id": "bd5e23e0-426e-41e6-8e74-0129bd32242e"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "uuShopMan/update -  invalidLanguageList",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let  jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",()=> {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that  uuAppErrorMap is empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains invalidLanguageList\",()=>{\r",
                          "    pm.expect(jsonData.invalidLanguageList).to.include(\"fr\");\r",
                          "})\r",
                          "pm.environment.set(\"uuShopManRevision\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript",
                        "id": "0a7fbd76-ca2f-4cca-9404-72c823dde3e9"
                      }
                    }
                  ],
                  "id": "55cbda48-bab6-429d-884e-19b76be0d449",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{   \r\n    \"name\": \"uuShop - {{$randomLoremWord}}\",\r\n    \"desc\": \"{{$randomLoremSentences}}\",\r\n\t\"languageList\": [\"fr\",\"ua\", \"en\", \"cs\", \"sk\"],\r\n\t\"revision\": {{uuShopManRevision}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/uuShopMan/update"
                  },
                  "response": []
                },
                {
                  "name": "uuShopMan/update - productListIsNotEmpty",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let  jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",()=> {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is not empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).is.not.to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that Default language can be updated only if there are no products created\",()=>{\r",
                          "    pm.expect(pm.response.text()).to.include(\"Default language can be updated only if there are no products created.\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "72c3b0b3-8c9d-49dd-aa2d-b546452797f5"
                      }
                    }
                  ],
                  "id": "14dd7950-d658-4d3c-9ed5-d53c20830aaf",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{   \r\n    \"defaultLanguage\": \"EN\",\r\n\t\"revision\": {{uuShopManRevision}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/uuShopMan/update"
                  },
                  "response": []
                },
                {
                  "name": "uuShopMan/update - Revision is not valid",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let  jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",()=> {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is not empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).is.not.to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that Revision is not valid.\",()=>{\r",
                          "    pm.expect(pm.response.text()).to.include(\"Revision is not valid.\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "e861f673-3410-467a-aa3e-608c9208bc68"
                      }
                    }
                  ],
                  "id": "d60d7e79-0af3-470f-ada4-ce64b8615260",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{   \r\n    \"name\": \"test\",\r\n\t\"revision\": 1\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/uuShopMan/update"
                  },
                  "response": []
                }
              ],
              "id": "b36c2248-74e9-4416-ab7f-a072e314bef1"
            }
          ],
          "id": "741e708c-4e60-4c05-bc30-b447cb885c9f"
        },
        {
          "name": "uuShopMan/upgradeWorkspaceToVersion",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "uuShopMan/upgradeWorkspaceToVersion",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let  jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",()=> {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that  uuAppErrorMap is empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "0c6af34c-1485-4095-8fe8-bcab0c394964"
                      }
                    }
                  ],
                  "id": "1ba1c4ce-7545-4421-9c67-13277b7793e2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"version\": \"0.1.0-beta.8\"\r\n}\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/uuShopMan/upgradeWorkspaceToVersion"
                  },
                  "response": []
                }
              ],
              "id": "6c9e1a40-6996-455c-a2c9-5f1b6dbe67d6"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "uuShopMan/upgradeWorkspaceToVersion - upgradeDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let  jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",()=> {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is not empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).not.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains upgradeDoesNotExist error\",()=>{\r",
                          "    pm.expect(pm.response.text()).to.include(\"Upgrade process doesn't exist\");\r",
                          "     pm.expect(pm.response.text()).to.include(\"test\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "bf2ff6cd-1fc1-4e4f-94ac-f823dd1e6dd8"
                      }
                    }
                  ],
                  "id": "138e3fa2-0bb6-42b2-9f69-4643f170aeb2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"version\": \"test\"\r\n}\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/uuShopMan/upgradeWorkspaceToVersion"
                  },
                  "response": []
                },
                {
                  "name": "uuShopMan/upgradeWorkspaceToVersion -unsupportedKey",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let  jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",()=> {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is not empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).not.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that dtoIn contains unsupported keys\",()=>{\r",
                          "     pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "12eeef46-bcb7-4b4e-93e6-944e7c56d030"
                      }
                    }
                  ],
                  "id": "f17a4df2-7de9-458f-85e7-d4cb4ca2b72e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"test\": \"test\"\r\n}\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/uuShopMan/upgradeWorkspaceToVersion"
                  },
                  "response": []
                }
              ],
              "id": "699dbb6a-4e60-4df3-b68d-7a2541036d16"
            }
          ],
          "id": "a66f4c83-e7fe-47bf-b4df-656151a91379"
        }
      ],
      "id": "fe6f519c-fa34-4104-9433-cb73bb9ce8bc"
    },
    {
      "name": "Customer",
      "item": [
        {
          "name": "customer/list",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "customer/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "d3004545-49ff-46f6-a86a-75d1e5c347de",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",()=> {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Ckeck that uuAppErrorMap is empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          " pm.environment.set(\"customerId\",jsonData.itemList[0].id);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "ede1abe0-6247-4cb1-af38-8a2c7fec91b4",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "51137286-baf4-48cb-bc37-310c0a9315df",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/customer/list"
                  },
                  "response": []
                }
              ],
              "id": "d8567aa7-7117-4166-a2bd-98cc06ed94e9"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "customer/list unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",()=> {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Ckeck that uuAppErrorMap is empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).not.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains warning 'DtoIn contains unsupported keys'\",()=>{\r",
                          "     pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "     pm.expect(pm.response.text()).to.include(\"$.test\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "b110df13-f6fa-40af-a061-6d252081cdaa"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "2df4aa39-c404-4a78-aa75-629068313a74"
                      }
                    }
                  ],
                  "id": "c785ab3d-53cd-49b0-bb40-8599d744f3d1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"test\":\"test\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/customer/list"
                  },
                  "response": []
                },
                {
                  "name": "customer/list - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",()=> {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Ckeck that uuAppErrorMap is empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).not.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn is not valid\",()=>{\r",
                          "     pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "     pm.expect(pm.response.text()).to.include(\"The key must not contain dot.\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "f7df54b1-6761-4879-98ff-7955e4d1dab3"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "e280acd8-3047-4b2a-b555-dce98f629c19"
                      }
                    }
                  ],
                  "id": "4d03a1bc-1353-4151-ad5b-c237f9696102",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"\":\"test\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/customer/list"
                  },
                  "response": []
                }
              ],
              "id": "d370a957-417f-41be-b8b1-1afa47f4d163"
            }
          ],
          "id": "855dd904-0240-4326-ad95-3e4ded892390"
        },
        {
          "name": "customer/create",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "customer/create",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e94f52f2-2fbe-4ccf-b11c-cfe06cc8b46a",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",()=> {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Ckeck that uuAppErrorMap is empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"customerId\",jsonData.id);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "2bfff85d-945f-430f-9e8a-799052547f27",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "6976b93d-89c1-4953-bd6f-42e83b7398a9",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"code\": \"code-{{$randomInt}}\",\r\n  \"name\": \"{{$randomUserName}}\",\r\n  \"billingInfo\": {\r\n    \"city\": \"{{$randomCity}}\",\r\n    \"streetAndNumber\": \"25\",\r\n    \"zipCode\": \"32300\",\r\n    \"country\": \"{{$randomCountryCode}}\",\r\n    \"rin\": 1,\r\n    \"vatId\": \"112133\"\r\n  },\r\n  \"deliveryInfo\": {\r\n    \"city\": \"KP City\",\r\n    \"streetAndNumber\": \"25\",\r\n    \"zipCode\": \"32300\",\r\n    \"country\": \"{{$randomCountryCode}}\"\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/customer/create"
                  },
                  "response": []
                },
                {
                  "name": "customer/create Copy",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e1c4cdbf-ce6d-4b5e-9d60-c2f1089f698b",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",()=> {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Ckeck that uuAppErrorMap is empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"customerId\",jsonData.id);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "72670808-cdf4-4d3c-84b5-64e852145694",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "621ea62a-3cb6-491f-b8f3-b4671634c2ca",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"code\": \"code-{{$randomInt}}\",\r\n  \"name\": \"{{$randomUserName}}\",\r\n  \"billingInfo\": {\r\n    \"city\": \"{{$randomCity}}\",\r\n    \"streetAndNumber\": \"25\",\r\n    \"zipCode\": \"32300\",\r\n    \"country\": \"{{$randomCountryCode}}\",\r\n    \"rin\": 1,\r\n    \"vatId\": \"112133\"\r\n  },\r\n  \"deliveryInfo\": {\r\n    \"city\": \"KP City\",\r\n    \"streetAndNumber\": \"25\",\r\n    \"zipCode\": \"32300\",\r\n    \"country\": \"{{$randomCountryCode}}\"\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/customer/create"
                  },
                  "response": []
                }
              ],
              "id": "e6a074e4-0c20-47d8-98fa-b3f7e0534685"
            }
          ],
          "id": "634b74e5-f2d7-4db7-acf3-4a85b7094340"
        },
        {
          "name": "customer/load",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "customer/load",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",()=> {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Ckeck that uuAppErrorMap is empty\",()=> {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "e62ef7f9-5c6c-4227-a90c-71f6d2b97831"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "ceab7bd3-6c41-4d15-810e-a27de43a5dab"
                      }
                    }
                  ],
                  "id": "9e76da15-2447-41c6-8dc9-e0ab28068b37",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\":\"{{customerId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/customer/load"
                  },
                  "response": []
                }
              ],
              "id": "e1e062e2-1af7-4dee-a02a-4cf238600ce5"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "customer/load - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",()=> {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Ckeck that DtoIn contains unsupported keys\",()=> {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "0b03da7a-9486-4ee8-96cf-cd609fc2cfa4"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "60e2c664-813a-40fd-bea4-96eaa349e29b"
                      }
                    }
                  ],
                  "id": "3750473a-f70c-4ed8-9821-9637ff730b36",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"isd\":\"{{customerId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/customer/load"
                  },
                  "response": []
                },
                {
                  "name": "customer/load - customerDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9fa33d3e-ac60-4c8d-943f-d8727a2364ed",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",()=> {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Ckeck that DtoIn contains error message 'Customer does not exist'\",()=> {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/customerDoesNotExist\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "2ed9f711-81ec-4f47-9c41-2940d77cb819",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "28785563-7848-42cf-9b02-84089a30680a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\":\"60b4e73cd03681001bf23c85\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/customer/load"
                  },
                  "response": []
                },
                {
                  "name": "customer/load - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",()=> {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Ckeck that DtoIn is not valid\",()=> {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "f7f3a163-497a-430c-a192-8d3ffc1d5176"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "e2520ce0-31ce-4a80-876e-64e8a5015952"
                      }
                    }
                  ],
                  "id": "8192b54f-e758-4297-9166-c41691082feb",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"\":\"60b4e73cd03681001bf23c85\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/customer/load"
                  },
                  "response": []
                }
              ],
              "id": "cbbf8b97-a289-4d7f-8f12-df07748d52c2"
            }
          ],
          "id": "c23abd58-a792-427f-a3c4-526672e1edcc"
        }
      ],
      "id": "84b73f3b-f557-4397-91a5-3a3db6a736e6"
    },
    {
      "name": "ShoppingCart",
      "item": [
        {
          "name": "shoppingCart/list",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "shoppingCart/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status test\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\", () => {\r",
                          "   pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "4e271428-a66d-48ed-bbc9-75359e30cdfd"
                      }
                    }
                  ],
                  "id": "a16097fc-f6d8-4ca8-b672-f0345f6cc776",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\r\n\t  \"pageInfo\":{\r\n\t\t\t\"pageIndex\":0,\r\n\t\t\t\"pageSize\":5\r\n\t\t\t\r\n\t\t} \r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/list"
                  },
                  "response": []
                }
              ],
              "id": "2e4c99cc-03c2-41b6-b1f7-ead174903a9a"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "shoppingCart/list - unsupportedKeyList",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status test\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut containcontains unsupportedKey in warning\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"unsupportedKeyList\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "18c3b116-5aa8-4fe6-85b9-0c6b13f0f1b3"
                      }
                    }
                  ],
                  "id": "d57f38c7-1fb7-4fef-a1ee-e9657f64dc55",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\r\n\t  \"pageIsdnfo\":{\r\n\t\t\t\"pageIndex\":0,\r\n\t\t\t\"pageSize\":5\r\n\t\t\t\r\n\t\t} \r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/list"
                  },
                  "response": []
                }
              ],
              "id": "0ef9bc53-937a-454d-8131-1dd36ebe6fd1"
            }
          ],
          "id": "4fef5871-ea2a-4507-83ee-ed01a74c3cff"
        },
        {
          "name": "shoppingCart/create",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "shoppingCart/create",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f7b670ff-650d-446e-a21a-768e5470cccf",
                        "exec": [
                          "const jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",()=> {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Ckeck that uuAppErrorMap is empty\",()=>{\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Ckeck that Cart name is set correctly\",()=>{\r",
                          "    pm.expect(jsonData.name).to.eql(pm.environment.get('randomFullName'));\r",
                          "});\r",
                          "\r",
                          " pm.environment.set(\"shoppingCartId\",jsonData.id);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e1c49517-d3d1-4391-8c9a-a305f7f1af3f",
                        "exec": [
                          "// random code\r",
                          "let randCode = Math.floor(Math.random() * 999999);\r",
                          "pm.environment.set(\"cartCode\",randCode);\r",
                          "\r",
                          "\r",
                          "let randomFullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
                          "pm.environment.set(\"randomFullName\",randomFullName+\" Cart\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "8bec2521-3cdd-4f43-8550-30a1dbba799e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"{{cartCode}}\",\r\n\t\"name\": \"{{randomFullName}}\",\r\n\r\n\t\"customerId\": \"{{customerId}}\",\r\n\t\"stateData\": { \r\n\t\t\"progress\": { \r\n\t\t\t\"weight\": 100, \r\n\t\t\t\"current\": 50\r\n\t\t} \r\n\t}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/create"
                  },
                  "response": []
                }
              ],
              "id": "ff13c1aa-f200-4222-923c-a2d9b6f74122"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "shoppingCart/create - unsupportedKey in paramMap",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut containcontains unsupportedKey in warning\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"stateData.progress\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "8ce2dc50-1edd-4998-af4b-9264abccf898"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "// random code\r",
                          "let randCode =Math.floor(Math.random() * 999999);\r",
                          "pm.environment.set(\"cartCode\",randCode);"
                        ],
                        "type": "text/javascript",
                        "id": "41fded5a-ee06-4549-89a1-333871500e05"
                      }
                    }
                  ],
                  "id": "b22b7c4e-bfd5-42c0-b7f3-dfea33799e02",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"{{cartCode}}\",\r\n\t\"name\": \"{{$randomUserName}}.cart\",\r\n\r\n\t\"customerId\": \"{{customerId}}\",\r\n\t\"stateData\": { \r\n\t\t\"progress\": { \r\n            \"test\":\"test\",\r\n\t\t\t\"weight\": 100, \r\n\t\t\t\"current\": 50\r\n\t\t} \r\n\t}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/create"
                  },
                  "response": []
                },
                {
                  "name": "shoppingCart/create - unsupportedKey",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut containcontains unsupportedKey in warning\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"unsupportedKey\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "5ee79334-1168-4eda-8624-a998b3a3c7ef"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "// random code\r",
                          "let randCode =Math.floor(Math.random() * 999999);\r",
                          "pm.environment.set(\"cartCode\",randCode);"
                        ],
                        "type": "text/javascript",
                        "id": "df2cc58a-3602-4314-91ba-0660cec300ea"
                      }
                    }
                  ],
                  "id": "ca6d2870-7cbd-4b4f-8273-3cc487994d7c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"{{cartCode}}\",\r\n\t\"name\": \"{{$randomUserName}}.cart\",\r\n    \"test\":\"test\",\r\n\t\"customerId\": \"{{customerId}}\",\r\n\t\"stateData\": { \r\n\t\t\"progress\": { \r\n           \r\n\t\t\t\"weight\": 100, \r\n\t\t\t\"current\": 50\r\n\t\t} \r\n\t}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/create"
                  },
                  "response": []
                },
                {
                  "name": "shoppingCart/create - DuplicateKey",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut containcontains DuplicateKey in error\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"DuplicateKey\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "67d4071e-4d2a-43a1-bb70-df87305c4c5d"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "bb069c06-a03e-48bf-8aca-cf16811ee072"
                      }
                    }
                  ],
                  "id": "c862f9ff-3d96-46fa-8470-d6dd40d412a3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"{{cartCode}}\",\r\n\t\"name\": \"{{$randomUserName}}.cart\",\r\n\t\"customerId\": \"{{customerId}}\",\r\n\t\"stateData\": { \r\n\t\t\"progress\": { \r\n           \r\n\t\t\t\"weight\": 100, \r\n\t\t\t\"current\": 50\r\n\t\t} \r\n\t}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/create"
                  },
                  "response": []
                }
              ],
              "id": "93ebbbf6-0465-4819-ad66-844b323fbf40"
            }
          ],
          "id": "4aca0b87-5f67-49ac-a368-bdd5f8dc6966"
        },
        {
          "name": "shoppingCart/load",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "shoppingCart/load",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "9916fb2b-1d02-4ba8-a59b-a80cdb7059ff"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "7b3be125-621b-4b66-bc01-e8537042a8f3"
                      }
                    }
                  ],
                  "id": "6b914d2a-27c6-4b95-aeb1-22a173d744e9",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t  \"id\": \"{{shoppingCartId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/load"
                  },
                  "response": []
                }
              ],
              "id": "99fe9062-117f-4035-b54f-da9f96500a89"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "shoppingCart/load - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains unsupportedKeys warning\", ()=>{\r",
                          "pm.expect(pm.response.text()).to.include(\"unsupportedKeys\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "232e22b6-f5e2-4cf3-b6c2-515c41b42c3b"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "dab64c37-bcac-4cc2-aad1-e3e6b147097e"
                      }
                    }
                  ],
                  "id": "6071d70a-2ac2-43f8-a595-e1e1246ee26c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t  \"id\": \"{{shoppingCartId}}\",\r\n      \"test\":\"test\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/load"
                  },
                  "response": []
                },
                {
                  "name": "shoppingCart/load - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains error 'The value must be id.'\", ()=>{\r",
                          "pm.expect(pm.response.text()).to.include(\"The value must be id.\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "fb0ef5d1-d53d-4f49-82ff-ea570eb844f1"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "29ee4aff-e319-4517-be1e-2296e435c248"
                      }
                    }
                  ],
                  "id": "17b1d6dc-38b0-4a85-b85c-21954366e076",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t  \"id\": \"\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/load"
                  },
                  "response": []
                },
                {
                  "name": "shoppingCart/load - invalidDtoIn & unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",  ()=> {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains unsupportedKeys warning\", ()=>{\r",
                          "pm.expect(pm.response.text()).to.include(\"unsupportedKeys\");\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains error 'The value is required but missing.' \",()=>{\r",
                          "pm.expect(pm.response.text()).to.include(\"The value is required but missing.\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "43775ace-a323-4254-ad58-d2fafdbaa8bf"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "c1c95121-cf0d-4019-918e-f5c21ed2ded4"
                      }
                    }
                  ],
                  "id": "5a77fc4f-c43a-46b1-a1da-4909aff47c79",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t  \"idd\": \"\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/load"
                  },
                  "response": []
                }
              ],
              "id": "95d7fc77-7540-41b5-b80d-d96fdc96a9a1"
            }
          ],
          "id": "720e1cdb-8ec0-42fa-afe5-c6fc1300eaa1"
        }
      ],
      "id": "56ec48f5-aa0d-43cd-add6-2a0966def68d"
    },
    {
      "name": "Category",
      "item": [
        {
          "name": "category/list",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "category/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8d18ea0a-c416-497f-8564-50fb01b8df5b",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"parentCategoryId\",jsonData.itemList[0].id);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "9b54bbc6-9035-4fe3-b29b-3465f5fd17c1",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "59708f7d-e29c-4d02-8f5b-dccb45adbfff",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/list"
                  },
                  "response": []
                }
              ],
              "id": "a4cffb93-235d-40df-97c4-875423057898"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "category/list- unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9cf420e8-c9a9-401b-ab45-c6e897f729ae",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that 'DtoIn contains unsupported keys' warning\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4c092b00-9cc1-4aae-8265-92eff6fe2213",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "20fe6721-68ff-479a-90ae-afc3bd7a0ffd",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"random.{{randomStockCode}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/list"
                  },
                  "response": []
                }
              ],
              "id": "52c20c17-59eb-4ab6-b18d-a19fc7a491e3"
            }
          ],
          "id": "1bac7ca8-44d9-4d96-a422-de5716c9986b"
        },
        {
          "name": "category/create",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "category/create",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "11b8f5e4-2849-4400-b68d-ffda01d55f38",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut is contains parentCategoryId in the List\", ()=> {\r",
                          "    pm.expect(jsonData.parentCategoryIdList[0].id).to.eql(pm.environment.get(\"parentCategoryId\"));\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"categoryId\",jsonData.id);\r",
                          "pm.environment.set(\"categoryCode\",jsonData.code);\r",
                          "pm.environment.set(\"categoryRev\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "45d22570-1be1-448c-94db-ffc1ece344b9",
                        "exec": [
                          "let randomcode  = Math.floor(Math.random() * 999);\r",
                          "pm.environment.set(\"randomStockCode\",randomcode);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "f3a62fee-7690-4210-a148-a75b9915e8cc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"random.{{randomStockCode}}\",\r\n\t\"name\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomUserName}}\"\r\n\t},\r\n\t\"description\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomLoremSentences}}\"\r\n\t},\r\n    \"parentCategoryId\":\"{{parentCategoryId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/create"
                  },
                  "response": []
                }
              ],
              "id": "1535029c-5c62-4c12-8ef2-a1798f8f9c82"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "category/create - suchLanguagesForCategoryNameAreNotSupportedByConfiguration",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1c20a260-832d-449c-8359-6532a022f976",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains warning 'Such languages for category name are not supported by uuShopMan.'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/suchLanguagesForCategoryNameAreNotSupportedByConfiguration\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"Such languages for category name are not supported by uuShopMan.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "645504f7-66a7-46b6-a4fb-4914ec2c6adb",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "3d6a5e2c-c2d2-4261-8b9d-2ec5f75b9fc5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"random.{{randomStockCode}}\",\r\n\t\"name\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomFullName}}\",\r\n        \"test\":\"test\"\r\n\t},\r\n\t\"description\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomLoremSentences}}\",\r\n        \"test\":\"test\"\r\n\t},\r\n     \"parentCategoryId\":\"{{parentCategoryId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/create"
                  },
                  "response": []
                },
                {
                  "name": "category/create -DtoIn is not valid.",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn is not valid.\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"DtoIn is not valid.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "39f22888-137d-4ff9-917f-edb1538e1397"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "0530f154-87f7-4187-8a4c-db881e9755b8"
                      }
                    }
                  ],
                  "id": "d191f66d-61b1-4c7f-a210-25fb2495e622",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"test\": \"random.{{randomStockCode}}\",\r\n\t\"name\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomUserName}}\",\r\n        \"test\":\"test\"\r\n\t},\r\n\t\"description\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomLoremSentences}}\",\r\n        \"test\":\"test\"\r\n\t}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/create"
                  },
                  "response": []
                },
                {
                  "name": "category/create  - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "01e0f02c-4881-4b1f-9080-ec9a5a532eeb",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that 'DtoIn contains unsupported keys' warning\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that unsupportedKeyList contains correct key\", ()=> {\r",
                          "    pm.expect(pm.response.text()).contain(\"$.test\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "a632afae-8018-4872-b7c8-115109a7fd00",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "a1d8d15c-ac10-4d4a-9014-4a022652d5c6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"coded\": \"random.{{randomStockCode}}\",\r\n    \"test\":\"test\",\r\n\t\"name\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomUserName}}\"\r\n\t},\r\n\t\"description\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomLoremSentences}}\"\r\n\t}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/create"
                  },
                  "response": []
                }
              ],
              "id": "90cb089c-2695-4b43-8e04-2eca8d0b79a4"
            }
          ],
          "id": "cb6f7e9c-3ab0-46ea-9455-e2bae02ca706"
        },
        {
          "name": "category/get",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "category/get - by ID",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut contains valid Category data\",()=> {\r",
                          "    pm.expect(pm.environment.get('categoryCode')).eql(jsonData.code);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "12d4996d-2897-41fa-82b0-a90fe2b4dac6"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "7db421f3-0dac-4845-8e44-5d1bc1e79aa4"
                      }
                    }
                  ],
                  "id": "f2bcafed-f498-4bf6-a98f-333efb499613",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\":\"{{categoryId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/get"
                  },
                  "response": []
                },
                {
                  "name": "category/get - by Code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut contains valid Category data\",()=> {\r",
                          "    pm.expect(pm.environment.get('categoryId')).eql(jsonData.id);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "41381ffd-faf1-4281-b623-6ad415df6dee"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "82a5983b-96df-4930-9536-acc57fcfe0cf"
                      }
                    }
                  ],
                  "id": "95f87f3f-d262-44a6-b28e-e5a77260eb4b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\":\"{{categoryCode}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/get"
                  },
                  "response": []
                }
              ],
              "id": "ee46b612-e0d5-4f87-abce-12bc3c77793f"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "category/get- categoryWasNotFound",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "d70fe529-7a3f-4b12-a893-bd6c8e674e7e",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains error 'Category does not exist.'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/categoryDoesNotExist\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"Category does not exist.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "7843cd46-5947-42bd-9b99-6a40894cde04",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "05f0ce0d-e7b4-458e-99d1-85acc5e3cdb7",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"id\":\"90ebd765895072001b695cfa\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/get"
                  },
                  "response": []
                },
                {
                  "name": "category/get -DtoIn is not valid.",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn is not valid.\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"DtoIn is not valid.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "45476955-a7f9-4e3a-ad85-8da6065053b3"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "7d415b96-cb2b-4948-a9df-aab2aea9f6ca"
                      }
                    }
                  ],
                  "id": "c10c07f4-e514-4fda-a0b2-c5e7c0d73719",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"test\": \"test\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/get"
                  },
                  "response": []
                },
                {
                  "name": "category/get- unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that 'DtoIn contains unsupported keys' warning\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that unsupportedKeyList contains correct key\", ()=> {\r",
                          "    pm.expect(pm.response.text()).contain(\"$.test\");\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "id": "4da0ccb3-0033-48b9-8444-88493988764f"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "52dd75df-e9a6-4257-849d-341dd6335c56"
                      }
                    }
                  ],
                  "id": "78a40145-df37-4817-a351-357356ac2bca",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"random.{{randomStockCode}}\",\r\n    \"test\":\"test\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/get"
                  },
                  "response": []
                }
              ],
              "id": "839d0588-8729-462a-ac45-b2174b71f539"
            }
          ],
          "id": "5e524208-d881-422f-87de-7e4402d5b06b"
        },
        {
          "name": "category/update",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "category/update - by Code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut contains valid Category data\",()=> {\r",
                          "    pm.expect(pm.environment.get('categoryId')).eql(jsonData.id);\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"categoryRev\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript",
                        "id": "d62cdcdd-bd15-42cb-b30a-48b402bcfc44"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "6ce678f2-9a0d-490e-a04b-7aae9fc47b20"
                      }
                    }
                  ],
                  "id": "9ad6c5cc-b2d8-402e-8601-a64f192fd477",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"random.{{randomStockCode}}\",\r\n\t\"name\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomUserName}}\",\r\n\t\t\"en\": \"Perfume\"\r\n\t},\r\n\t\"description\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomLoremSentences}}\",\r\n\t\t\"en\": \"{{$randomLoremSentences}}\"\r\n},\r\n\t\"revision\": {{categoryRev}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/update"
                  },
                  "response": []
                },
                {
                  "name": "category/update - by ID",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut contains valid Category data\",()=> {\r",
                          "    pm.expect(pm.environment.get('categoryCode')).eql(jsonData.code);\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"categoryRev\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript",
                        "id": "efc78515-67cc-4d71-9188-64d960546321"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "ebaf4a26-e984-48f8-9cf3-5d517b8b85c4"
                      }
                    }
                  ],
                  "id": "84bb55e2-c4f1-4f16-b1db-36c419fb64e8",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"{{categoryId}}\",\r\n\t\"name\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomUserName}}\",\r\n\t\t\"en\": \"Perfume\"\r\n\t},\r\n\t\"description\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomLoremSentences}}\",\r\n\t\t\"en\": \"{{$randomLoremSentences}}\"\r\n},\r\n\t\"revision\": {{categoryRev}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/update"
                  },
                  "response": []
                }
              ],
              "id": "54054987-da82-4089-af5f-dc634df108aa"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "category/update - DtoIn is not valid.",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn is not valid.\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"DtoIn is not valid.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "2ba2c6f6-f3d9-4625-afb0-380c9d3698b0"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "003df372-c3db-4612-8c54-eb47e3823ccc"
                      }
                    }
                  ],
                  "id": "527850b9-9f7c-4474-a73e-18951abe2f38",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"test\": \"test\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/update"
                  },
                  "response": []
                },
                {
                  "name": "category/update- unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that 'DtoIn contains unsupported keys' warning\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that unsupportedKeyList contains correct key\", ()=> {\r",
                          "    pm.expect(pm.response.text()).contain(\"$.test\");\r",
                          "})\r",
                          "\r",
                          "pm.environment.set(\"categoryRev\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript",
                        "id": "b8479878-1cb8-4ceb-b3c9-2a1f72aded6e"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "e71de402-eadb-4688-bc5c-46cf00b0ca11"
                      }
                    }
                  ],
                  "id": "ff607892-0395-4c55-94c3-e8814ef4cde7",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"random.{{randomStockCode}}\",\r\n    \"test\":\"test\",\r\n\t\"revision\": {{categoryRev}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/update"
                  },
                  "response": []
                },
                {
                  "name": "category/update - categoryDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "48c9638b-574b-4725-9f68-092fabd95e0e",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut contains error 'Category does not exist'\",()=> {\r",
                          "    pm.expect(pm.response.text()).contain(\"/categoryDoesNotExist\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e9b5ab6b-0124-403d-9c6b-d26d4629ca22",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "ceb81222-7448-4334-a5ef-394573fa95b0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"test01\",\r\n\t\"name\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomUserName}}\",\r\n\t\t\"en\": \"Perfume\"\r\n\t},\r\n\t\"description\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomLoremSentences}}\",\r\n\t\t\"en\": \"{{$randomLoremSentences}}\"\r\n},\r\n\t\"revision\": {{categoryRev}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/update"
                  },
                  "response": []
                },
                {
                  "name": "category/update -categoryNameDoesNotContainDefaultLanguage",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b77ef2fb-aca5-40c1-ba7a-25409c2c586e",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut contains 'Category name does not contain the default language of uuShopMan' error \",()=> {\r",
                          "    pm.expect(pm.response.text()).contain(\"/categoryNameDoesNotContainDefaultLanguage\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "0877b8f0-9463-41c7-9642-f24ba173c05f",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "ed78060c-dd96-4795-b6ff-285a728f8a29",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"test01\",\r\n\t\"name\": {\r\n\t\t\"ex\": \"Perfume\"\r\n\t},\r\n\t\"description\": {\r\n\t\t\"en\": \"{{$randomLoremSentences}}\"\r\n},\r\n\t\"revision\": {{categoryRev}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/update"
                  },
                  "response": []
                },
                {
                  "name": "category/update - categoryDescriptionDoesNotContainDefaultLanguage",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "d242acc2-efc7-4fb8-a745-1f6b6fba49e4",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut contains 'Category description does not contain the default language of uuShopMan' error \",()=> {\r",
                          "    pm.expect(pm.response.text()).contain(\"/categoryDescriptionDoesNotContainDefaultLanguage\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "81ed4455-47ff-4700-abb0-cfc20a2cd9ac",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "7c2647d5-55b3-40c6-93dc-01023a4bf943",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"test01\",\r\n\t\"name\": {\r\n        \"{{defaultLanguage}}\":\"test\",\r\n\t\t\"en\": \"Perfume\"\r\n\t},\r\n\t\"description\": {\r\n\t\t\"ex\": \"{{$randomLoremSentences}}\"\r\n},\r\n\t\"revision\": {{categoryRev}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/update"
                  },
                  "response": []
                },
                {
                  "name": "category/update - invalidRevision",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut contains error 'Revision is not valid.'\",()=> {\r",
                          "    pm.expect(pm.response.text()).contain(\"/invalidRevision\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "3a530117-0b1b-4d71-b2f4-a6a872c116a0"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "11b6d4c1-34a2-4b7d-b9f7-d52d025d2556"
                      }
                    }
                  ],
                  "id": "3153a628-3ccf-456c-aab9-874be2a2db0d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"{{categoryId}}\",\r\n\t\"name\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomUserName}}\"\r\n\t},\r\n\t\"description\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{$randomLoremSentences}}\"\r\n},\r\n\t\"revision\": 9992\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/update"
                  },
                  "response": []
                },
                {
                  "name": "category/update - suchLanguagesForCategoryNameAreNotSupportedByConfiguration",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut contains warninwarnings 'Such languages for category name are not supported by uuShopMan'\",()=> {\r",
                          "    pm.expect(pm.response.text()).contain(\"/suchLanguagesForCategoryNameAreNotSupportedByConfiguration\");\r",
                          "     pm.expect(pm.response.text()).contain(\"Such languages for category name are not supported by uuShopMan\");\r",
                          "});\r",
                          "pm.environment.set(\"categoryRev\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript",
                        "id": "4462d67c-418b-4bca-9ef6-bd78ae1c4ee8"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "6d6f36c8-e6d4-444e-841a-c43b16d03108"
                      }
                    }
                  ],
                  "id": "51726a0d-d62c-4ba6-b4f6-40201f632468",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"{{categoryId}}\",\r\n\t\"name\": {\r\n        \"{{defaultLanguage}}\":\"test\",\r\n\t\t\"AZ\": \"Perfume\"\r\n\t},\r\n\t\"description\": {\r\n\t\t\"en\": \"{{$randomLoremSentences}}\", \r\n        \"{{defaultLanguage}}\":\"test\"\r\n},\r\n\t\"revision\": {{categoryRev}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/update"
                  },
                  "response": []
                },
                {
                  "name": "category/update - suchLanguagesForCategoryDescriptionAreNotSupportedByConfiguration",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut contains warninwarnings 'Such languages for category description are not supported by uuShopMan.'\",()=> {\r",
                          "    pm.expect(pm.response.text()).contain(\"/suchLanguagesForCategoryDescriptionAreNotSupportedByConfiguration\");\r",
                          "     pm.expect(pm.response.text()).contain(\"Such languages for category description are not supported by uuShopMan.\");\r",
                          "});\r",
                          "pm.environment.set(\"categoryRev\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript",
                        "id": "d6930e99-63f2-464c-af7d-1ea0e9e79ab4"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "76c8949e-e507-4e7c-8713-59449059117f"
                      }
                    }
                  ],
                  "id": "8f8cbb51-732a-4964-803b-bc28dd0cbd88",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"{{categoryId}}\",\r\n\t\"name\": {\r\n        \"{{defaultLanguage}}\":\"test\"\r\n\t\t\r\n\t},\r\n\t\"description\": {\r\n\t\t\"AZ\": \"Perfume\",\r\n        \"{{defaultLanguage}}\":\"test\"\r\n},\r\n\t\"revision\": {{categoryRev}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/category/update"
                  },
                  "response": []
                }
              ],
              "id": "7ad34f6e-2f16-4ee1-9ca6-4864d3b85989"
            }
          ],
          "id": "eb6517d8-9051-4d7e-972f-e3708cc160f2"
        }
      ],
      "id": "f1c6e4d9-9761-4763-a4cb-754ce8fa07a6"
    },
    {
      "name": "Product",
      "item": [
        {
          "name": "product/list",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "product/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "pm.test(\"Status test 200\",  ()=> {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\",  ()=>  {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that responce contains itme list\", ()=>{\r",
                          "    pm.expect(jsonData.itemList).is.not.eql({});\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "5e5b04c9-fd4b-46a8-9f06-9e9f168672bb"
                      }
                    }
                  ],
                  "id": "c4daf925-1be7-4732-bbdb-f30574e158b3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"filterMap\": {\r\n\t\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/list"
                  },
                  "response": []
                }
              ],
              "id": "43d01b30-64d0-4168-b0c1-862b9b48f2ef"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "product/list -invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status test 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"invalidDtoIn\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "4d0eacce-7925-4be0-b1d1-23704691f014"
                      }
                    }
                  ],
                  "id": "f7a491b0-2476-4b02-b656-a2693b928256",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"filterMap\": {\r\n\t\"type\":\"something\"\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/list"
                  },
                  "response": []
                },
                {
                  "name": "product/list -unsupported key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status test 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"unsupportedKey\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKey\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "af99a659-c41f-4b75-a885-557305e744be"
                      }
                    }
                  ],
                  "id": "580fdd7f-cfd7-468e-b025-910a2a80e991",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"fiiiilterMap\": {\r\n\t\"type\":\"something\"\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/list"
                  },
                  "response": []
                }
              ],
              "id": "1c1aa264-e710-4050-8339-541d4c7c090d"
            }
          ],
          "id": "020ec356-a47d-483f-b2e0-11ff833ff1e2"
        },
        {
          "name": "product/create",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "product/create",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "3fb46ec2-4b7c-4c87-b11e-fad5e7d7006e",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.environment.set(\"productId\", jsonData.id);\r",
                          "pm.environment.set(\"productCode\", jsonData.code);\r",
                          "pm.environment.set(\"productRevision\", jsonData.sys.rev);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "10d10809-f13b-4b2e-a346-cf6be51141cf",
                        "exec": [
                          "let productName = pm.variables.replaceIn('{{$randomProduct}}-{{$randomProductMaterial}}');\r",
                          "pm.environment.set(\"randomProductName\",productName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "863421ca-11c0-4aba-92fd-15bf1c14c439",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"name\": {\r\n\t\t\"{{defaultLanguage}}\": \"iPhone X pro MAX\",\r\n\t\t\"cs\": \"iPhone X pro MAX on cs\",\r\n        \"sk\": \"iPhone X pro MAXon sk\"\r\n\t},\r\n\t\"type\": \"goods\",\r\n\t\"description\": {\r\n\t\t\"{{defaultLanguage}}\": \"{{randomProductName}} description\",\r\n\t\t\"cs\": \"{{randomProductName}} description on cs\",\r\n        \"sk\": \"{{randomProductName}} description on sk\"\r\n\t},\r\n\t\"categoryList\": [\r\n\t\t\"random.442\",\r\n        \"random.878\"\r\n\t],\r\n\t\"manufacturer\": \"PS\",\r\n\t\"isStockLimited\": true,\r\n\t\"maxOrderAmount\": 5,\r\n\t\"priceWithoutVat\": 5000,\r\n\t\"priceWithVat\": 6000,\r\n\t\"vat\": 21,\r\n\t\"isRefundable\": false,\r\n\t\"freeData\": \"yearOfLaunch: 1991, designer: Seazann\",\r\n\t\"stateData\": {\r\n\t\t\"progress\": {\r\n\t\t\t\"weight\": 3,\r\n\t\t\t\"current\": 1\r\n\t\t}\r\n\t},\r\n\t\"goods\": {\r\n\t\t\"isSerial\": false,\r\n\t\t\"toBeExpired\": true\r\n\t}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/create"
                  },
                  "response": []
                }
              ],
              "id": "d8722401-51b3-4384-9f48-d8fce91ec1b4"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "product/create - unsupported key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"unsupportedKey\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKey\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "3c203c08-83d5-4a04-933e-9324eab465f0"
                      }
                    }
                  ],
                  "id": "5cb49104-ab34-4faa-bba0-38e85d2e7aec",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"unsupported\": {\r\n\t\t\"en\": \"Some name\",\r\n\t\t\"cs\": \"Some description on cs\",\r\n        \"sk\": \"Some description on sk\",\r\n        \"ua\": \"Some description on ua\"\r\n\t},\r\n\t\"type\": \"goods\",\r\n\t\"description\": {\r\n\t\t\"en\": \"Some description\",\r\n\t\t\"cs\": \"Some description on cs\",\r\n        \"sk\": \"Some description on sk\"\r\n\t},\r\n\t\"category\": [\r\n\t\t\"game\"\r\n\t],\r\n\t\"manufacturer\": \"PS\",\r\n\t\"isStockLimited\": true,\r\n\t\"maxOrderAmount\": 5,\r\n\t\"priceWithoutVat\": 5000,\r\n\t\"priceWithVat\": 6000,\r\n\t\"vat\": \"normal\",\r\n\t\"isRefundable\": false,\r\n\t\"toU\": \"https://uuapp.plus4u.net/uu-bookkit-maing01/258d3ec56e004cd8bcde12853dedc12a/book/page?code=59680412\",\r\n\t\"freeData\": \"yearOfLaunch: 1991, designer: Seazann\",\r\n\t\"stateData\": {\r\n\t\t\"progress\": {\r\n\t\t\t\"weight\": 3,\r\n\t\t\t\"current\": 1\r\n\t\t}\r\n\t},\r\n\t\"goods\": {\r\n\t\t\"isSerial\": false,\r\n\t\t\"toBeExpired\": true\r\n\t}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/create"
                  },
                  "response": []
                },
                {
                  "name": "product/create - productDescriptionDoesNotMatchDefaultLanguage",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "7db6198c-962c-40d8-b222-9d70d65d1a94",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"productDescriptionDoesNotMatchDefaultLanguage\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/productDescriptionDoesNotMatchDefaultLanguage\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "55f8f2bf-5767-4db6-b230-a9c5b242b6fb",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"name\": {\r\n\t\t\"en\": \"Some name\",\r\n\t\t\"cs\": \"Some description on cs\",\r\n        \"sk\": \"Some description on sk\",\r\n        \"ua\": \"Some description on ua\"\r\n\t},\r\n\t\"type\": \"goods\",\r\n\t\"description\": {\r\n\t\t\"ua\": \"Some description\",\r\n\t\t\"cs\": \"Some description on cs\",\r\n        \"sk\": \"Some description on sk\"\r\n\t},\r\n\t\"categoryList\": [\r\n\t\t\"game\"\r\n\t],\r\n\t\"manufacturer\": \"PS\",\r\n\t\"isStockLimited\": true,\r\n\t\"maxOrderAmount\": 5,\r\n\t\"priceWithoutVat\": 5000,\r\n\t\"priceWithVat\": 6000,\r\n\t\"vat\": \"normal\",\r\n\t\"isRefundable\": false,\r\n\t\"freeData\": \"yearOfLaunch: 1991, designer: Seazann\",\r\n\t\"stateData\": {\r\n\t\t\"progress\": {\r\n\t\t\t\"weight\": 3,\r\n\t\t\t\"current\": 1\r\n\t\t}\r\n\t},\r\n\t\"goods\": {\r\n\t\t\"isSerial\": false,\r\n\t\t\"toBeExpired\": true\r\n\t}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/create"
                  },
                  "response": []
                },
                {
                  "name": "product/create - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"invalidDtoIn\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "e73d9928-4a05-4cb7-8406-f35903c71551"
                      }
                    }
                  ],
                  "id": "c6aa1128-eea6-4901-b011-045b8bb42eee",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"naaame\": {\r\n\t\t\"en\": \"Some name\",\r\n\t\t\"cs\": \"Some description on cs\",\r\n        \"sk\": \"Some description on sk\"\r\n\t},\r\n\t\"type\": \"goods\",\r\n\t\"description\": {\r\n\t\t\"en\": \"Some description\",\r\n\t\t\"cs\": \"Some description on cs\",\r\n        \"sk\": \"Some description on sk\"\r\n\t},\r\n\t\"category\": [\r\n\t\t\"game\"\r\n\t],\r\n\t\"manufacturer\": \"PS\",\r\n\t\"isStockLimited\": true,\r\n\t\"maxOrderAmount\": 5,\r\n\t\"priceWithoutVat\": 5000,\r\n\t\"priceWithVat\": 6000,\r\n\t\"vat\": \"normal\",\r\n\t\"isRefundable\": false,\r\n\t\"toU\": \"https://uuapp.plus4u.net/uu-bookkit-maing01/258d3ec56e004cd8bcde12853dedc12a/book/page?code=59680412\",\r\n\t\"freeData\": \"yearOfLaunch: 1991, designer: Seazann\",\r\n\t\"stateData\": {\r\n\t\t\"progress\": {\r\n\t\t\t\"weight\": 3,\r\n\t\t\t\"current\": 1\r\n\t\t}\r\n\t},\r\n\t\"goods\": {\r\n\t\t\"isSerial\": false,\r\n\t\t\"toBeExpired\": true\r\n\t}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/create"
                  },
                  "response": []
                },
                {
                  "name": "product/create - goodsAttributesMissing",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9cf4f720-8f7c-4a8c-84ab-63e909c57f44",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"goodsAttributesMissing\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/goodsAttributesMissing\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "2d4a9d4b-e86b-48ef-afba-6401d71b1062",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"name\": {\r\n\t\t\"{{defaultLanguage}}\": \"Some name\",\r\n\t\t\"cs\": \"Some description on cs\",\r\n        \"sk\": \"Some description on sk\"\r\n\t},\r\n\t\"type\": \"goods\",\r\n\t\"description\": {\r\n\t\t\"{{defaultLanguage}}\": \"Some description\",\r\n\t\t\"cs\": \"Some description on cs\",\r\n        \"sk\": \"Some description on sk\"\r\n\t},\r\n\t\"categoryList\": [\r\n\t\t\"game\"\r\n\t],\r\n\t\"manufacturer\": \"PS\",\r\n\t\"isStockLimited\": true,\r\n\t\"maxOrderAmount\": 5,\r\n\t\"priceWithoutVat\": 5000,\r\n\t\"priceWithVat\": 6000,\r\n\t\"vat\": \"normal\",\r\n\t\"isRefundable\": false,\r\n\t\"freeData\": \"yearOfLaunch: 1991, designer: Seazann\",\r\n\t\"stateData\": {\r\n\t\t\"progress\": {\r\n\t\t\t\"weight\": 3,\r\n\t\t\t\"current\": 1\r\n\t\t}\r\n\t}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/create"
                  },
                  "response": []
                },
                {
                  "name": "product/create - paymentInstrumentsNotSupportedByConfiguration",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"paymentInstrumentsNotSupportedByConfiguration\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"allowedPaymentInstruments\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "8eedd224-30d9-4940-a2fa-e78673b3cc8e"
                      }
                    }
                  ],
                  "id": "7ced70e6-d98c-4e96-91bd-cd1c9ae315bb",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"name\": {\r\n\t\t\"en\": \"Some name\",\r\n\t\t\"cs\": \"Some description on cs\",\r\n        \"sk\": \"Some description on sk\"\r\n\t},\r\n\t\"type\": \"goods\",\r\n\t\"description\": {\r\n\t\t\"en\": \"Some description\",\r\n\t\t\"cs\": \"Some description on cs\",\r\n        \"sk\": \"Some description on sk\"\r\n\t},\r\n\t\"category\": [\r\n\t\t\"game\"\r\n\t],\r\n\t\"manufacturer\": \"PS\",\r\n\t\"isStockLimited\": true,\r\n\t\"maxOrderAmount\": 5,\r\n\t\"priceWithoutVat\": 5000,\r\n\t\"priceWithVat\": 6000,\r\n\t\"vat\": \"normal\",\r\n\t\"isRefundable\": false,\r\n    \"allowedPaymentInstruments\": [\"PAYMENT_CARMA\"],\r\n\t\"toU\": \"https://uuapp.plus4u.net/uu-bookkit-maing01/258d3ec56e004cd8bcde12853dedc12a/book/page?code=59680412\",\r\n\t\"freeData\": \"yearOfLaunch: 1991, designer: Seazann\",\r\n\t\"stateData\": {\r\n\t\t\"progress\": {\r\n\t\t\t\"weight\": 3,\r\n\t\t\t\"current\": 1\r\n\t\t}\r\n\t},\r\n    \"goods\": {\r\n\t\t\"isSerial\": false,\r\n\t\t\"toBeExpired\": true\r\n\t}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/create"
                  },
                  "response": []
                }
              ],
              "id": "c2a74b8f-716d-47c7-a843-b1143b1eeeb0"
            }
          ],
          "id": "92911c69-50d0-4e62-93b0-244ae5e5bdaf"
        },
        {
          "name": "product/load",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "product/load - by ID",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status test\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "2c674a70-dd9f-4988-a6a9-e784fea9eea8"
                      }
                    }
                  ],
                  "id": "b48b3e84-51d7-4b75-9a2a-1969c61658b2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t \"id\": \"{{productId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/load"
                  },
                  "response": []
                },
                {
                  "name": "product/load -  by Code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status test\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check for correct loading by product code\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(pm.variables.get(\"productId\")).to.eql(jsonData.id);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "6fb341c8-6511-44d0-9b2b-f41e87bbe5a8"
                      }
                    }
                  ],
                  "id": "a75fd816-6c83-45e1-be6a-4620ce716025",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t \"code\": \"{{productCode}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/load"
                  },
                  "response": []
                }
              ],
              "id": "6677b37f-406e-4b94-abf4-46c5e603d6ed"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "product/load - unsupported key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\",()=> {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\",  ()=> {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not. eql({});\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains unsupportedKey warning\",  ()=> {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKey\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "16d89d34-7681-4ef3-a6ae-7d82f22535b0"
                      }
                    }
                  ],
                  "id": "391996e0-976c-48cd-96d2-4345eba88a28",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t \"id\": \"{{productId}}\",\r\n     \"test\": \"test\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/load"
                  },
                  "response": []
                },
                {
                  "name": "product/load - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status test\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut is contains error ''invalid DtoIn'\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "3d0d7d22-1493-4c78-8d2d-549181bdd9ad"
                      }
                    }
                  ],
                  "id": "74aa214d-c82e-45b2-9720-fb8be952ee48",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t \"id\": \"doesNotID\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/load"
                  },
                  "response": []
                },
                {
                  "name": "product/load -productDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "7e732972-8d4a-4b72-8514-f70dcf1c90f5",
                        "exec": [
                          "pm.test(\"Status code is 400\", ()=> {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check for empty uuAppErrorMap\",()=> {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that dtoOut contains error message : 'product does not exist'\",()=> {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/productDoesNotExist\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "98dffcc2-216c-442e-b70d-7ef0955c98d3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t \"id\": \"60c1bbf248217c{{$randomInt}}b026b31\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/load"
                  },
                  "response": []
                }
              ],
              "id": "a30e4483-3a50-47ec-808a-4974a8398e14"
            }
          ],
          "id": "6c9e0c53-7aa0-463c-b940-5a3bf8dcbced"
        },
        {
          "name": "product/update",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "product/update",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8dca60d7-3c90-4e88-8c84-47b3408d8050",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.environment.set(\"productRevision\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "02a20986-6c25-4147-a3fa-3df134109c08",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"{{productId}}\",\r\n\t\"name\": {\r\n                \"{{defaultLanguage}}\": \"iPhone 11 pro MAX\",\r\n\t\t \t\t\"en\": \"iPhone 11 pro MAX\"\r\n   \r\n\t},\r\n\t\t\"description\": {\r\n            \"{{defaultLanguage}}\": \"iPhone 11 pro MAX\",\r\n\t\t \t\t\"en\": \"iPhone 11 pro MAX\"\r\n\t},\r\n\r\n\t\"revision\":{{productRevision}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/update"
                  },
                  "response": []
                }
              ],
              "id": "266df80b-0a74-4db9-8d7c-6cbd0b16db2c"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "product/update - unsupported key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "pm.test(\"unsupportedKey\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKey\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "6c81f2f6-8e43-471a-a781-36995ce74498"
                      }
                    }
                  ],
                  "id": "0002d68c-caf8-49ca-9e88-216d02f9399e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"{{id}}\",\r\n\t\"name\": {\r\n\t\t \t\t\"cs\": \"Some name\"\r\n   \r\n\t},\r\n\t\t\"description\": {\r\n\t\t \t\t\"cs\": \"Some text\"\r\n\t},\r\n    \"test\": \"test\",\r\n\t\r\n\t\"revision\":2\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/update"
                  },
                  "response": []
                },
                {
                  "name": "product/update - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "pm.test(\"invalidDtoIn\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "e18757c1-0a96-4d83-8300-069c1c6b2fd2"
                      }
                    }
                  ],
                  "id": "afeafa5c-e98c-4c65-8ff8-1186c4e95714",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"iddd\": \"{{id}}\",\r\n\t\"name\": {\r\n\t\t \t\t\"cs\": \"Some name\"\r\n   \r\n\t},\r\n\t\t\"description\": {\r\n\t\t \t\t\"cs\": \"Some text\"\r\n\t},\r\n\t\r\n\t\"revision\":3\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/update"
                  },
                  "response": []
                },
                {
                  "name": "product/update - invalid revision",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ac1465d0-410c-49ac-9032-26281da5a81b",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "pm.test(\"invalidRevision\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidRevision\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "650f1009-ab1e-4268-b871-315b7ae924f6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"{{productId}}\",\r\n\t\"name\": {\"en\": \"uuBookkit\", \"cs\": \"uuBookkit\", \"sk\":\"uuBookkit\"},\r\n\t\"revision\":8\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/update"
                  },
                  "response": []
                },
                {
                  "name": "product/update - productDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c466a74c-aff9-422e-846b-a84c4d2d7c74",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "pm.test(\"productDoesNotExist\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/productDoesNotExist\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "f203a7d6-b54b-46d2-a6b6-017517955217",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"60c898aa48217c001b02a760\",\r\n\t\"name\": {\r\n\t\t \t\t\"cs\": \"Some name\"\r\n   \r\n\t},\r\n\t\t\"description\": {\r\n\t\t \t\t\"cs\": \"Some text\"\r\n\t},\r\n\t\r\n\t\"revision\":1\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/update"
                  },
                  "response": []
                },
                {
                  "name": "product/update - productNotFoundByCode",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "pm.test(\"productNotFoundByCode\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/productNotFoundByCode\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "0a8b6a94-f773-4c16-b07d-7f12e42a9d14"
                      }
                    }
                  ],
                  "id": "c8001879-cf2f-456f-8b13-05ee30b8597c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"code\": \"265e8bc572a7e4c0\",\r\n\t\"name\": {\r\n\t\t \t\t\"cs\": \"Some name\"\r\n   \r\n\t},\r\n\t\t\"description\": {\r\n\t\t \t\t\"cs\": \"Some text\"\r\n\t},\r\n\t\r\n\t\"revision\":1\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/product/update"
                  },
                  "response": []
                }
              ],
              "id": "951de629-dc34-4f30-a68d-68279f6d7810"
            }
          ],
          "id": "1d69c3d0-0ceb-43a1-b488-1ccfaa5baa58"
        }
      ],
      "id": "253ccc45-23d0-434b-b92c-5403f01a093f"
    },
    {
      "name": "ProductVariant",
      "item": [
        {
          "name": "productVariant/createMany",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "productVariant/createMany",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8a5133ec-c234-4dbb-ba86-e7c08f9c481f",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "var data = JSON.parse(responseBody);\r",
                          "pm.environment.set(\"productVarianId\", data.productVariantList.itemList[0].id);\r",
                          "pm.environment.set(\"defaultProductVarianId\", data.productVariantList.itemList[1].id);\r",
                          "pm.environment.set(\"productVariantRevision\", data.productVariantList.itemList[0].sys.rev);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "ad888fb0-5c7e-4317-ae3b-a863b9cce8c3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"productId\": \"616d899df9b2a90027e10605\",\r\n\t\"productVariantsList\": [\r\n\t\t{\r\n\t\t\t\"code\": \"\",\r\n\t\t\t\"variantsCharacteristics\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"key\": \"model\",\r\n\t\t\t\t\t\"value\": \"32gb\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n            \"priceWithoutVat\":32000\r\n\t\t}\r\n\t]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/createMany"
                  },
                  "response": []
                }
              ],
              "id": "d6eb7cbf-7aad-4e4a-a58c-bd3eacac0f1c"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "productVariant/createMany - unsupported key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6f9089c2-fb19-42f1-981f-5ca31d8e2976",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "pm.test(\"unsupportedKey\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKey\");\r",
                          "});\r",
                          "pm.test(\"defaultProductVariantAlreadyExists\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/defaultProductVariantAlreadyExists\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "09e52a4b-1702-49b0-8e44-803e8e6054a4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"productId\": \"{{productId}}\",\r\n    \"productVariantList\": [{\r\n    \"code\": \"bacb997c56200299\",\r\n    \"variantsCharacteristics\": [{\r\n      \"key\": \"colour\",\r\n      \"value\": \"blue\"\r\n\t\t}] }],\r\n    \"test\": \"test\"\r\n \r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/createMany"
                  },
                  "response": []
                },
                {
                  "name": "productVariant/createMany - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9eb10be5-f659-4b9a-9e27-4ff3f6d18e5f",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "pm.test(\"invalidDtoIn\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "8e9316f3-6931-4bad-866a-4967b998d359",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"productVariantsList\": [{\r\n    \"code\": \"bacb997c56200297\",\r\n    \"variantsCharacteristics\": [{\r\n      \"key\": \"colour\",\r\n      \"value\": \"red\"\r\n\t\t}] }]\r\n \r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/createMany"
                  },
                  "response": []
                },
                {
                  "name": "productVariant/createMany - productDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "a54af76a-5989-421b-b799-8e6b1ead6106",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "pm.test(\"productDoesNotExist\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/productDoesNotExist\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "dd377b42-e812-4e0e-ab61-f9b4c2dd9921",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"productId\": \"6112704e7ec7ad001bdd7801\",\r\n    \"productVariantsList\": [{\r\n    \"code\": \"bacb997c56200298\",\r\n    \"variantsCharacteristics\": [{\r\n      \"key\": \"colour\",\r\n      \"value\": \"green\"\r\n\t\t}] }]\r\n \r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/createMany"
                  },
                  "response": []
                }
              ],
              "id": "6958748c-3480-4135-9675-a38e543dee1a"
            }
          ],
          "id": "5a4c5a0c-97f3-401d-abd9-632281e90937"
        },
        {
          "name": "productVariant/get",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "productVariant/get",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e5e5f342-4da2-4f5b-9f7f-2e27c1e5afb9",
                        "exec": [
                          "var jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check for correct product variand get\", () => {\r",
                          "    pm.expect(pm.environment.get(\"productVarianId\")).to.eql(jsonData.id)\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "b7029ec5-adfb-48b7-8cf1-b5aa357a6335",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\":\"{{productVarianId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/get"
                  },
                  "response": []
                }
              ],
              "id": "e08ccdd9-2a28-4d15-a7f8-3bc3105552bb"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "productVariant/get  - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f60c76c4-c3ab-4013-b58d-c441030dca42",
                        "exec": [
                          "var jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains warning 'unsupportedKeys' \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include('/unsupportedKeys');\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "8fa489eb-8110-42af-aa7a-09a8949ea99e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\":\"{{productVarianId}}\",\r\n    \"test\":\"test\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/get"
                  },
                  "response": []
                },
                {
                  "name": "productVariant/get  - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b25ce1d5-9db1-4dcf-bcb5-0420c8466fc0",
                        "exec": [
                          "var jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\", () => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains error message 'DtoIn is not valid'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include('/invalidDtoIn\"');\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "a7ec50e0-585a-4256-9775-df8979295370",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"test\":\"{{productVarianId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/get"
                  },
                  "response": []
                },
                {
                  "name": "productVariant/get  - productVariantDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "3a8831a8-ab60-4025-8a81-7110dd24072d",
                        "exec": [
                          "var jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\", () => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains error message 'DtoIn is not valid'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include('/productVariantDoesNotExist\"');\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "f24eb634-d28e-4daa-9271-bc4f82f4c622",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\":\"612dda4f35cb2e002cfe7b6e\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/get"
                  },
                  "response": []
                }
              ],
              "id": "06761770-817a-481c-a709-ae328eb8e0fd"
            }
          ],
          "id": "e2c35529-0dd8-4e86-85c1-5681fed21c42"
        },
        {
          "name": "productVariant/list",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "productVariant/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9006e803-d5b7-4054-82df-ace78c92b971",
                        "exec": [
                          "var jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "4e5af5f2-d23a-4675-92e0-e2b143d8f706",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/list"
                  },
                  "response": []
                }
              ],
              "id": "51493cf6-18fa-4fe1-a6a4-f93cc2476931"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "productVariant/list - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "48756780-55d7-4cde-8f0a-c69242c612d3",
                        "exec": [
                          "var jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains warning 'unsupportedKeys' \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include('/unsupportedKeys');\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "eda25029-4cdc-4943-9c1f-39176603c86d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"unsupportedKeyList\":\"unsupportedKeyList\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/list"
                  },
                  "response": []
                }
              ],
              "id": "794a2c46-935b-40d1-9feb-39f66b10d439"
            }
          ],
          "id": "4c8d2469-0695-4002-96db-c72f024c4291"
        },
        {
          "name": "productVariant/update",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "productVariant/update",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "00ed194c-4970-48da-bc9a-67556e2b4b28",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that revision is updated\",()=>{\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    let prodVarRev = parseInt(pm.variables.get(\"productVariantRevision\"));\r",
                          "    pm.expect(jsonData.sys.rev).to.eql(prodVarRev+1);\r",
                          "    pm.environment.set(\"productVariantRevision\", prodVarRev+1);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "5e21775a-4e5f-48cf-b471-76916ee5e22a",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "44fb81fe-be77-483b-ab2a-717273a31b95",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\r\n\t\"id\": \"616e942df9b2a90027e10f9a\",\r\n\t\"characteristicsList\": [{\r\n    \"key\": \"{{$randomJobType}}\",\r\n    \"value\": \"{{$randomColor}}\"\r\n  }],\r\n\t\"priceWithoutVat\": 1000,\r\n    \"priceWithVat\": 2000,\r\n\t\"revision\": {{productVariantRevision}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/update"
                  },
                  "response": []
                }
              ],
              "id": "29cb9618-765f-4cb1-a156-f25ee8d5bfb2"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "productVariant/update - unsupported key",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "pm.test(\"unsupportedKey\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKey\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "dfb10db2-5e48-4cd5-8c71-9aecae71f74d"
                      }
                    }
                  ],
                  "id": "d9cb547c-71c6-4eb6-b056-865a54e75560",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"60c9f91e48217c001b02b3bd\",\r\n  \"characteristicList\": [{\r\n    \"key\": \"size\",\r\n    \"value\": \"S\"\r\n  }],\r\n  \"priceWithoutVat\": 100,\r\n  \"test\": \"test\",\r\n  \"revision\": 3\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/update"
                  },
                  "response": []
                },
                {
                  "name": "productVariant/update - productVariantWasNotFound",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "d75f5cef-afd8-4eeb-b135-42151613d934",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for existing uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "pm.test(\"invalidDtoIn\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/productVariantDoesNotExist\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "6570beb6-55d8-45a8-86bf-a7c11c2ced9c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"sometest\": \"60c9f91e48217c001b02b3bd\",\r\n  \"characteristicList\": [{\r\n    \"key\": \"size\",\r\n    \"value\": \"S\"\r\n  }],\r\n  \"priceWithoutVat\": 100,\r\n  \"revision\": 4\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/update"
                  },
                  "response": []
                },
                {
                  "name": "productVariant/update - invalid revision",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "86cf0f26-5b79-445f-8243-6cb078b7fbd0",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "pm.test(\"invalidRevision\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidRevision\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "eaee74de-12d0-42b1-819b-40789162b0ce",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"{{productVarianId}}\",\r\n  \"characteristicList\": [{\r\n    \"key\": \"size\",\r\n    \"value\": \"S\"\r\n  }],\r\n  \"priceWithoutVat\": 100,\r\n  \"revision\":8\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/update"
                  },
                  "response": []
                },
                {
                  "name": "productVariant/update - productVariantDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "401c91d1-bb52-43a8-81df-e90026e99514",
                        "exec": [
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.not.eql({});\r",
                          "});\r",
                          "pm.test(\"productVariantDoesNotExist\", function () {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/productVariantDoesNotExist\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "841468cb-3675-4d74-a136-76366648715a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"60c9f91e48217c001b02b3b3\",\r\n  \"characteristicList\": [{\r\n    \"key\": \"size\",\r\n    \"value\": \"S\"\r\n  }],\r\n  \"priceWithoutVat\": 100,\r\n  \"revision\": 4\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/update"
                  },
                  "response": []
                }
              ],
              "id": "c5199d12-8bd5-4580-9eb5-5965d8c04576"
            }
          ],
          "id": "905b6425-3e8d-49d0-b622-d73ef51488d1"
        },
        {
          "name": "productVariant/remove",
          "item": [
            {
              "name": "ALT",
              "item": [
                {
                  "name": "productVariant/remove - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\", () =>  {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check for DtoIn contains unsupported keys error\", () => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "b5c93abf-c75f-4476-bda2-361f94fe0ff3"
                      }
                    }
                  ],
                  "id": "5c304b83-af88-4515-a7c7-fff00cd3a263",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"test\": \"{{productVarianId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/remove"
                  },
                  "response": []
                },
                {
                  "name": "productVariant/remove - productVariantDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "2fee56e4-ec5c-4a27-88d2-d101c7986c5e",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\", () =>  {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"productVariantDoesNotExist\", () => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/productVariantDoesNotExist\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "c5efd065-e30e-4413-9619-c84382f3de8f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"60e5af14ec8e8b001bea0d7a\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/remove"
                  },
                  "response": []
                },
                {
                  "name": "productVariant/remove - defaultProductVariantCantBeDeleted",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9c016066-1628-45e3-90cb-5d2cf499e379",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\", () =>  {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that Default product variant can't be removed\", () => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/defaultProductVariantCantBeRemoved\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "f2c13e44-1a71-4d8e-916e-fbea6830b568",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"{{defaultProductVarianId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/remove"
                  },
                  "response": []
                },
                {
                  "name": "productVariant/remove - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\", () =>  {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn is not valid.\", () => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "ee7f8a69-9b11-4d68-bd6f-3acf4916260d"
                      }
                    }
                  ],
                  "id": "18ddd674-155b-4590-86f3-49d2d56ca806",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"\": \"{{productVarianId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/remove"
                  },
                  "response": []
                }
              ],
              "id": "139a4bd4-554b-40d9-937d-19b046c78ca8"
            },
            {
              "name": "HDS",
              "item": [
                {
                  "name": "productVariant/remove",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "09e758d4-e5e1-47b2-b89d-31569664dc1c",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that Product Variant is deleted\", function () \r",
                          "{\r",
                          "    pm.expect(pm.response.text()).to.not.include(pm.variables.get(\"productVarianId\"));\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "d65ebc2b-001c-45f2-bdda-7d2d76bb8815",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"{{productVarianId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/remove"
                  },
                  "response": []
                }
              ],
              "id": "df641894-026d-4b7e-8d64-88b9ecdeaced"
            }
          ],
          "id": "052a44af-bbab-49e5-84e3-f0db03b41b93"
        }
      ],
      "id": "30ef3c0d-4ccd-4dd9-af05-82e8c6a6cebc"
    },
    {
      "name": "StockCard",
      "item": [
        {
          "name": "stockCard/list",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "stockCard/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains item in the list\",() => {\r",
                          "    pm.expect(jsonData.itemList).not.eql([]);\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"stockCardID\",jsonData.itemList[0].id);"
                        ],
                        "type": "text/javascript",
                        "id": "f7594d47-a950-407b-ba0e-9bc26dbeaa53"
                      }
                    }
                  ],
                  "id": "b1cbbda5-600e-4702-8802-8b803a6faa1e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"filterMap\": {\r\n\t\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockCard/list"
                  },
                  "response": []
                }
              ],
              "id": "cb015f88-0700-4ef6-96d8-c753e6a7c3b3"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "stockCard/list - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains warning 'DtoIn contains unsupported keys.'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "     pm.expect(pm.response.text()).to.include(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          "pm.test(\"Check that paramMap is contains all unsupportedKey in list\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"$.test\");\r",
                          "     pm.expect(pm.response.text()).to.include(\"$.filterMap.test\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "8d218430-afd9-4fb9-ac32-92752c7b55c5"
                      }
                    }
                  ],
                  "id": "a6487563-c8fa-4671-888f-9829403c166b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"test\":25,\r\n\t\"filterMap\": {\r\n    \"test\": \r\n    \"active\"\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockCard/list"
                  },
                  "response": []
                }
              ],
              "id": "4a45d10c-aea6-42a9-85dc-0cf78be33911"
            }
          ],
          "id": "c0fa360c-9b8f-448f-909f-1ca1f17002e2"
        },
        {
          "name": "stockCard/load",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "stockCard/load",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "210f7968-4d5a-419a-a6d5-fb7ed392544d"
                      }
                    }
                  ],
                  "id": "c370d971-1b91-4846-9bc3-7d9932230848",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"id\":\"{{stockCardID}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockCard/load"
                  },
                  "response": []
                }
              ],
              "id": "0bdb0c81-3786-402c-8682-8a80964cab11"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "stockCard/load - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains warning 'DtoIn contains unsupported keys'\",() => {\r",
                          "    pm.expect(pm.response.text()).contain(\"/unsupportedKeys\");\r",
                          "    pm.expect(pm.response.text()).contain(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          "pm.test(\"Check that  paraMap contains all unsupportedKeyList\",()=> {\r",
                          "    pm.expect(pm.response.text()).contain(\"$.unsupportedKeys\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "116620da-b9ec-482f-ba21-31ba94b79b13"
                      }
                    }
                  ],
                  "id": "103e836b-19f0-41cc-9a33-3b3cf9880413",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"id\":\"{{stockCardID}}\",\r\n\"unsupportedKeys\":\"unsupportedKeys\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockCard/load"
                  },
                  "response": []
                },
                {
                  "name": "stockCard/load - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn is not valid\",() => {\r",
                          "    pm.expect(pm.response.text()).contain(\"invalidDtoIn\");\r",
                          "    pm.expect(pm.response.text()).contain(\"DtoIn is not valid\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "d2e596db-f987-46f8-9561-0557ad4f3a69"
                      }
                    }
                  ],
                  "id": "6e045e5d-fbd4-4a2c-b737-c60b84d5c677",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"invalidDtoIn\":\"{{shoppingCartId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockCard/load"
                  },
                  "response": []
                },
                {
                  "name": "stockCard/load - Stock was not found",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f81167a8-0e9b-44c0-b5a9-b37924b38800",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains 'stockCardDoesNotExist\",() => {\r",
                          "    pm.expect(pm.response.text()).contain(\"/stockCardDoesNotExist\");\r",
                          "    \r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "ad5bdbde-7ad6-4cec-8a2b-1fd808944976",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"id\":\"60e6ea10ec8e8b002bea192c\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockCard/load"
                  },
                  "response": []
                }
              ],
              "id": "75667a41-8859-4fbc-8226-82958345a0fc"
            }
          ],
          "id": "d8533d79-6d4b-4a0d-9c27-143c8cf6e867"
        }
      ],
      "id": "5197ccce-1244-4eb7-8ba1-4e9b6e33b331"
    },
    {
      "name": "Stock",
      "item": [
        {
          "name": "stock/list",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "stock/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains item in the list\",() => {\r",
                          "    pm.expect(jsonData.itemList).not.eql([]);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "6d9e28de-5984-4f24-a33d-25b1f567c0d6"
                      }
                    }
                  ],
                  "id": "41ae2eb8-7b13-4ea0-9953-914c13d30098",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"filterMap\": {\r\n\t\"state\": \r\n    \"active\"\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stock/list"
                  },
                  "response": []
                }
              ],
              "id": "396c9bf8-7336-4f16-9379-3833356c5785"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "stock/list - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains warning 'DtoIn contains unsupported keys.'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "     pm.expect(pm.response.text()).to.include(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "a5279c39-464b-4b3c-8e7e-58e3c74443c4"
                      }
                    }
                  ],
                  "id": "411607c4-d44d-4ee9-ba4b-6d125d2cb307",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"filterMap\": {\r\n\t\"state\": \r\n    \"active\",\r\n    \"test\": \r\n    \"active\"\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stock/list"
                  },
                  "response": []
                }
              ],
              "id": "bca1e862-58d6-43ae-9a85-4447bc77b7d5"
            }
          ],
          "id": "3511985b-9938-43bf-9fc6-97f4fe52f186"
        },
        {
          "name": "stock/create",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "stock/create",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "73a42db8-c39b-4819-b992-17d54d90d37e",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.environment.set(\"stockCode\",jsonData.code);\r",
                          "pm.environment.set(\"stockId\",jsonData.id);\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "0fa4f9a2-de15-418a-aa31-8c5d379b5a4e",
                        "exec": [
                          "let randomcode  = Math.floor(Math.random() * 9999);\r",
                          "pm.environment.set(\"randomStockCode\",randomcode);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "adf083e0-8167-4686-ab81-dc6125dbfcdc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"code\": \"random.{{randomStockCode}}\",\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"description\":\"{{$randomLoremSentences}}\",\r\n  \"stockAuthorityCode\":\"8790-581-1\",\r\n  \"stateData\":{\r\n      \"progress\":{\r\n          \"weight\":100,\r\n          \"current\":50\r\n      }\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stock/create"
                  },
                  "response": []
                }
              ],
              "id": "358a66c9-38fb-49ed-a4e7-e6d9ba86a10d"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "stock/create - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains warning 'DtoIn contains unsupported keys.' \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains all warnings in unsupportedKeyList \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"$.test\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"$.stateData.progress.test\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "c73bb434-e266-405d-b4f6-317bd324acb8"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let randomcode  = Math.floor(Math.random() * 9999);\r",
                          "pm.environment.set(\"randomStockCode\",randomcode);"
                        ],
                        "type": "text/javascript",
                        "id": "831f7776-184d-472f-9f15-0bffddf449df"
                      }
                    }
                  ],
                  "id": "47a5e2ac-a7d9-4da3-96c4-ddf212444f82",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"code\": \"random.{{randomStockCode}}\",\r\n  \"name\": \"{{$randomFullName}}\",\r\n  \"description\":\"{{$randomLoremSentences}}\",\r\n  \"test\":\"test\",\r\n  \"stateData\":{\r\n    \"test\":\"test\",\r\n      \"progress\":{\r\n          \"test\":\"test\",\r\n          \"weight\":100,\r\n          \"current\":50\r\n      }\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stock/create"
                  },
                  "response": []
                },
                {
                  "name": "stock/create - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains error 'DtoIn is not valid.' \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains error message 'The content of shape must be valid'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"The content of shape must be valid\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "2810463a-a8cd-4ecc-b11b-4c7c24274c64"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let randomcode  = Math.floor(Math.random() * 9999);\r",
                          "pm.environment.set(\"randomStockCode\",randomcode);"
                        ],
                        "type": "text/javascript",
                        "id": "f1645cb0-2f4c-4b97-900e-4f999cd069a9"
                      }
                    }
                  ],
                  "id": "09e04466-1163-45ef-9840-e6ae1af0d55b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"invalidDtoIn\": \"invalidDtoIn\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stock/create"
                  },
                  "response": []
                }
              ],
              "id": "c5e8baa2-bdb0-4bb5-b4a0-c40972d5429c"
            }
          ],
          "id": "3e8e949d-9736-4718-92a1-3767b06ae833"
        },
        {
          "name": "stock/load",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "stock/load - by ID",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that stock is loaded\",()=> {\r",
                          "    pm.expect(jsonData.code).to.eql(pm.environment.get(\"stockCode\"));\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "bc44553f-c840-4a7e-b172-9008eb0b10c5"
                      }
                    }
                  ],
                  "id": "f4198a97-232b-4bb6-b497-7a65bca1f38e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"id\":\"{{stockId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stock/load"
                  },
                  "response": []
                },
                {
                  "name": "stock/load - by Code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that stock is loaded\",()=> {\r",
                          "    pm.expect(jsonData.id).to.eql(pm.environment.get(\"stockId\"));\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "c7c31d16-cc76-47b2-9e78-7c310ae34cb6"
                      }
                    }
                  ],
                  "id": "cff3080e-5d0d-4b8e-b266-d2084b3573a6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"code\":\"{{stockCode}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stock/load"
                  },
                  "response": []
                }
              ],
              "id": "fe70872d-81d9-417b-80c5-0b167febe45e"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "stock/load - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains warning 'DtoIn contains unsupported keys'\",() => {\r",
                          "    pm.expect(pm.response.text()).contain(\"/unsupportedKeys\");\r",
                          "    pm.expect(pm.response.text()).contain(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          "pm.test(\"Check that  paraMap contains all unsupportedKeyList\",()=> {\r",
                          "    pm.expect(pm.response.text()).contain(\"$.unsupportedKeys\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "ddfc5c11-ee37-4ddb-9697-77ceb22adc34"
                      }
                    }
                  ],
                  "id": "9de4762f-0af7-49cb-b6d0-e0c01b5ae61a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"id\":\"{{stockId}}\",\r\n\"unsupportedKeys\":\"unsupportedKeys\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stock/load"
                  },
                  "response": []
                },
                {
                  "name": "stock/load - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn is not valid\",() => {\r",
                          "    pm.expect(pm.response.text()).contain(\"invalidDtoIn\");\r",
                          "    pm.expect(pm.response.text()).contain(\"DtoIn is not valid\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "5197f120-299d-4ec8-84fb-35cf5329a715"
                      }
                    }
                  ],
                  "id": "eb946d90-1a7d-4203-a353-a267b5973e2c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"invalidDtoIn\":\"{{stockId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stock/load"
                  },
                  "response": []
                },
                {
                  "name": "stock/load - stockDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "20e05e45-c73e-44fc-bf15-c453da00da45",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains 'stockDoesNotExist'error\",() => {\r",
                          "    pm.expect(pm.response.text()).contain(\"/stockDoesNotExist\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "599ea990-6796-46ef-8b3f-e1c2255cb4dc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"id\":\"60e6ea10ec8e8b002bea192c\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stock/load"
                  },
                  "response": []
                }
              ],
              "id": "cd94f2b4-b8d5-48ca-94eb-1566047d7ada"
            }
          ],
          "id": "9b1746a5-67c0-4f06-9d89-d7cc92aaa01d"
        }
      ],
      "id": "100679b9-7ce3-4f79-987d-96ffa305897e"
    },
    {
      "name": "StockReceipt",
      "item": [
        {
          "name": "stockReceipt/list",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "stockReceipt/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains item in the list\",() => {\r",
                          "    pm.expect(jsonData.itemList).not.eql([]);\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"stockReceiptID\",jsonData.itemList[0].id);"
                        ],
                        "type": "text/javascript",
                        "id": "d6cf299f-ce15-4765-bb53-3b375672b701"
                      }
                    }
                  ],
                  "id": "8a862e17-ab84-438e-a5ce-d4c05b52ee3b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t \"pageInfo\":{\r\n    \"pageIndex\": 1,\r\n    \"pageSize\":2\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/list"
                  },
                  "response": []
                }
              ],
              "id": "999ddbcc-5f07-4bfa-9df5-579ba6ec159e"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "stockReceipt/list - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains warning 'DtoIn contains unsupported keys.'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "     pm.expect(pm.response.text()).to.include(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          "pm.test(\"Check that paramMap is contains all unsupportedKey in list\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"$.test\");\r",
                          "     pm.expect(pm.response.text()).to.include(\"$.pageInfo.test\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "90013ba5-1694-41d4-8942-a27331a9a9bf"
                      }
                    }
                  ],
                  "id": "a933e8a3-41b0-468e-bb5d-7bf47cdf7cc1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"test\":\"test\",\r\n\t \"pageInfo\":{\r\n     \"test\":\"test\",\r\n    \"pageIndex\": 1,\r\n    \"pageSize\":2\r\n  }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/list"
                  },
                  "response": []
                }
              ],
              "id": "5853b7a1-a143-4d26-a538-00fdf5fbb728"
            }
          ],
          "id": "3bab2c7f-e684-4acf-aa61-bcb9ae9d03c9"
        },
        {
          "name": "stockReceipt/create",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "Pre-condition",
                  "item": [
                    {
                      "name": "productVariant/createMany",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "4d0f5cb9-e5e7-4f61-a3b5-34c54f8d89aa",
                            "exec": [
                              "pm.test(\"Status code is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                              "    var jsonData = JSON.parse(responseBody);\r",
                              "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                              "});\r",
                              "var data = JSON.parse(responseBody);\r",
                              "pm.environment.set(\"productVarianId\", data.productVariantList.itemList[1].id);\r",
                              "pm.environment.set(\"productVariantRevision\", data.productVariantList.itemList[1].sys.rev);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "dd91d7c5-4dbf-4b33-a3a2-8289722fdc92",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": {
                            "token": "{{token}}"
                          }
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n\t\"productId\": \"{{productId}}\",\r\n\t\"productVariantsList\": [\r\n\t\t{\r\n\t\t\t\"code\": \"\",\r\n\t\t\t\"variantsCharacteristics\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"key\": \"parfume\",\r\n\t\t\t\t\t\"value\": \"sweet\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "{{host}}/{{contextPath}}/{{awid}}/productVariant/createMany"
                      },
                      "response": []
                    }
                  ],
                  "id": "08af521f-6002-47d5-a57d-73df3b1884af"
                },
                {
                  "name": "stockReceipt/create",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that stock Receipt is created\",() => {\r",
                          "    pm.expect(jsonData.state).to.eql(\"created\");\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"stockReceiptID\",jsonData.id);\r",
                          "pm.environment.set(\"stockReceiptCode\",jsonData.code);\r",
                          "pm.environment.set(\"stockReceiptRevision\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript",
                        "id": "fd7fe4d7-be8c-46e4-b80f-86befd25022c"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let randomcode  = Math.floor(Math.random() * 9999);\r",
                          "pm.environment.set(\"randomStockCode\",randomcode);"
                        ],
                        "type": "text/javascript",
                        "id": "5b22d0ac-3ca7-4bf2-8a0b-c6ab81073d18"
                      }
                    }
                  ],
                  "id": "fa4f8f25-ed4a-4f74-8cd0-f08183ee6d03",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"code\": \"random.{{randomStockCode}}\",\r\n  \"description\":\"{{$randomLoremSentences}}\",\r\n  \"stockId\": \"{{stockId}}\",\r\n  \"productList\": [{\r\n    \"productVariantId\": \"{{productVarianId}}\",\r\n    \"quantity\": 10,\r\n    \"purchasingPriceWithoutVat\": 1000\r\n  }]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/create"
                  },
                  "response": []
                }
              ],
              "id": "716d1831-e6fb-4f98-b111-8fd247a18eb1"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "stockReceipt/create - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "67ddfc4c-f09d-4d1d-aba6-2509acfdb66a",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains warning 'DtoIn contains unsupported keys.' \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains all warnings in unsupportedKeyList \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"$.test\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"$.productList[0].test\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "2a76a8c4-3ffc-46bb-8c0d-cb2150945160",
                        "exec": [
                          "let randomcode  = Math.floor(Math.random() * 9999);\r",
                          "pm.environment.set(\"randomStockCode\",randomcode);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "6b524322-68dd-45ac-899c-97f7bd145681",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"test\": \"random.{{randomStockCode}}\",\r\n  \"description\":\"{{$randomLoremSentences}}\",\r\n  \"test1\":\"test\",\r\n  \"stockId\": \"{{stockId}}\",\r\n  \"productList\": [{\r\n    \"productVariant\": \"{{defaultProductVarianId}}\",\r\n    \"quantity\": 10,\r\n    \"purchasingPriceWithoutVat\": 1000,\r\n    \"test\":\"test\"\r\n  }]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/create"
                  },
                  "response": []
                },
                {
                  "name": "stockReceipt/create - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains error 'DtoIn is not valid.' \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains error message 'The content of shape must be valid'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"The content of shape must be valid\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "03d2e6f3-e204-4fa9-86c6-6c7c87123dc9"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "15cf1aa1-715d-4d55-917d-e39d1c01ec26"
                      }
                    }
                  ],
                  "id": "308eb2ba-f413-4b9f-a190-fda76a4a7b6d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"invalidDtoIn\": \"invalidDtoIn\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/create"
                  },
                  "response": []
                },
                {
                  "name": "stockReceipt/create -stockWasNotFound",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "70658ebc-2762-4c81-b184-f44442989fce",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains error 'stockDoesNotExist' \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/stockDoesNotExist\");\r",
                          "    \r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4c9cb476-006f-4c05-91f0-3cfbffea85dd",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "ac099a49-7fc3-427a-bdae-777ae40713e4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"code\": \"random.{{randomStockCode}}\",\r\n  \"description\":\"{{$randomLoremSentences}}\",\r\n  \"test\":\"test\",\r\n  \"stockId\": \"60e6ea99ec8e8b001bea192c\",\r\n  \"productList\": [{\r\n    \"productVariantId\": \"{{defaultProductVarianId}}\",\r\n    \"quantity\": 10,\r\n    \"purchasingPriceWithoutVat\": 1000,\r\n    \"test\":\"test\"\r\n  }]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/create"
                  },
                  "response": []
                },
                {
                  "name": "stockReceipt/create - productVariantsWereNotFound",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains error 'Product variants were not found' \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/productVariantsWereNotFound\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"Product variants were not found.\");\r",
                          "\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "d9efa495-7830-451a-b97d-1bdf32b80328"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "60838c7f-565c-4ef7-9257-66ec227abfdc"
                      }
                    }
                  ],
                  "id": "49472428-1f58-449c-9053-b805e8f415e0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"code\": \"random.{{randomStockCode}}\",\r\n  \"description\":\"{{$randomLoremSentences}}\",\r\n  \"stockId\": \"{{stockId}}\",\r\n  \"productList\": [{\r\n    \"productVariantId\": \"60e6aa24ec8e8b001bea16c9\",\r\n    \"quantity\": 10,\r\n    \"purchasingPriceWithoutVat\": 1000\r\n  }]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/create"
                  },
                  "response": []
                }
              ],
              "id": "2bebeaab-fe78-4ba2-991e-01a26b8fb201"
            }
          ],
          "id": "64ad6c6d-77c5-4c1a-a85a-abec16b3515d"
        },
        {
          "name": "stockReceipt/load",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "stockReceipt/load",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5cdf710c-b2e7-4fe5-8297-b092861372bd",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that stock is loaded\",()=> {\r",
                          "    pm.expect(jsonData.code).to.eql(pm.environment.get(\"stockReceiptCode\"));\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "3b5fe6d2-6390-4db9-98e8-a88485d007ad",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"id\":\"{{stockReceiptID}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/load"
                  },
                  "response": []
                }
              ],
              "id": "998dd7e3-458e-4b6e-827a-5b9e9e6f4f62"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "stockReceipt/load - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains warning 'DtoIn contains unsupported keys'\",() => {\r",
                          "    pm.expect(pm.response.text()).contain(\"/unsupportedKeys\");\r",
                          "    pm.expect(pm.response.text()).contain(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          "pm.test(\"Check that  paraMap contains all unsupportedKeyList\",()=> {\r",
                          "    pm.expect(pm.response.text()).contain(\"$.unsupportedKeys\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "78f45926-c029-421e-98ab-02a103c5975c"
                      }
                    }
                  ],
                  "id": "3d5dfaab-0d7d-4f9c-8d89-cd3e536bed42",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"id\":\"{{stockReceiptID}}\",\r\n\"unsupportedKeys\":\"unsupportedKeys\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/load"
                  },
                  "response": []
                },
                {
                  "name": "stockReceipt/load - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn is not valid\",() => {\r",
                          "    pm.expect(pm.response.text()).contain(\"invalidDtoIn\");\r",
                          "    pm.expect(pm.response.text()).contain(\"DtoIn is not valid\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "a9dd587f-f739-47a1-928e-f8eb418e3c4d"
                      }
                    }
                  ],
                  "id": "e88f2313-5978-4781-88dd-547ec8b6ce5a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"invalidDtoIn\":\"{{stockReceiptID}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/load"
                  },
                  "response": []
                },
                {
                  "name": "stockReceipt/load - stockReceiptDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "867cc75e-8607-4d75-9ce3-1fa7cd67c2fb",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains 'stockReceiptDoesNotExist\",() => {\r",
                          "    pm.expect(pm.response.text()).contain(\"/stockReceiptDoesNotExist\");\r",
                          "   });\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "00138b72-3ce7-46b4-b23c-f640ad9fa176",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"id\":\"60e6ea10ec8e8b002bea192c\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/load"
                  },
                  "response": []
                }
              ],
              "id": "0885a0f1-65d4-415c-9db9-5b48bdb50414"
            }
          ],
          "id": "f044aac6-8a11-4d30-8bdf-09b05e263a0a"
        },
        {
          "name": "stockReceipt/list",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "stockReceipt/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f05994da-0ebd-40d6-84fd-39f4ecd4dd5c",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "89fd9d59-7266-466c-9237-69b712b3eb33",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/list"
                  },
                  "response": []
                }
              ],
              "id": "63d0cbab-9f90-4f3e-9870-524384123f4d"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "stockReceipt/list- unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ebfa979d-a939-4d71-ad63-7ee9b210ef77",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains warning 'DtoIn contains unsupported keys'\",() => {\r",
                          "    pm.expect(pm.response.text()).contain(\"/unsupportedKeys\");\r",
                          "    pm.expect(pm.response.text()).contain(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "91442008-bda0-457b-974f-2012707d6ed1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"unsupportedKeys\":\"unsupportedKeys\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/list"
                  },
                  "response": []
                }
              ],
              "id": "e7ae1c34-69e6-4aae-ab7d-7ce15ce3bf27"
            }
          ],
          "id": "e9eb7425-8531-4e7b-96b8-be63642a6ad5"
        },
        {
          "name": "stockReceipt/confirm",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "stockReceipt/confirm",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "74cf9fba-56ca-48b6-ba69-aca57e40fdda",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that stock Receipt is confirmed\",() => {\r",
                          "    pm.expect(jsonData.state).to.eql(\"confirmed\");\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"stockReceiptRevision\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "1e641fd0-66cc-47cb-9431-c7c862c035e1",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "045bbfe8-1bac-479c-a750-f319cb7c4db7",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"61dd21bb6d9412001b17b280\",\r\n\t\"revision\": \"1\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/confirm"
                  },
                  "response": []
                }
              ],
              "id": "db450fac-c737-48eb-a838-d236adcd834c"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "stockReceipt/confirm - Stock Receipt is not in proper state",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains error 'Stock Receipt is not in proper state.'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/stockReceiptIsNotInProperState\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"Stock Receipt is not in proper state.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "14effff2-8911-4206-bcad-8d0e530f0144"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "ee18575d-8c4e-4877-973b-d2a61a0d7d6c"
                      }
                    }
                  ],
                  "id": "ed89ae78-eb59-4daf-b9eb-557f6f736a35",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"{{stockReceiptID}}\",\r\n\t\"revision\": {{stockReceiptRevision}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/confirm"
                  },
                  "response": []
                },
                {
                  "name": "stockReceipt/confirm- invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains error 'DtoIn is not valid.' \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"DtoIn is not valid.\");\r",
                          "});\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "a253b04d-c191-49b3-94ce-6d19de6bbbe2"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "a8716faf-c7b3-463c-97e4-1c89b57552ef"
                      }
                    }
                  ],
                  "id": "4efff865-302d-47f8-8b03-cece016e4fd7",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"invalidDtoIn\": \"invalidDtoIn\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/confirm"
                  },
                  "response": []
                },
                {
                  "name": "stockReceipt/confirm - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains warning 'DtoIn contains unsupported keys.' \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "});\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "7eb11e65-a2a7-4c16-a646-1b28c3ab3609"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "410d25ef-4d95-4dc6-ac0a-ed1b36bfe61a"
                      }
                    }
                  ],
                  "id": "19baa5f6-d464-401b-ae13-0b7650c8206f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"test\": \"{{stockReceiptID}}\",\r\n\t\"revision\": {{stockReceiptRevision}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/confirm"
                  },
                  "response": []
                },
                {
                  "name": "stockReceipt/confirm - stockReceiptDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "40c6d734-4227-4cb8-adb0-98e119b71aa8",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains error 'stockReceiptDoesNotExist' \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/stockReceiptDoesNotExist\");\r",
                          "});\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2a3b798-b2a6-4a4a-a90e-beb3240b2cb3",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "50b2650a-3a3a-4fb3-9e44-8882d4c81c21",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"60e704f1ec8e8b001bea1a0a\",\r\n\t\"revision\": {{stockReceiptRevision}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockReceipt/confirm"
                  },
                  "response": []
                }
              ],
              "id": "1ca1311d-9b22-4abc-9a88-132d06ea97de"
            }
          ],
          "id": "24409862-9eb4-4782-806d-345f64b914f4"
        }
      ],
      "id": "8c8fe927-ff13-4e57-a197-89a8cf30893c"
    },
    {
      "name": "StockIssue",
      "item": [
        {
          "name": "stockIssue/list",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "stockIssue/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "53ef146e-70a7-4b3b-8087-9cab743073f4",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"stockIssueID\",jsonData.itemList[0].id);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "408398a0-7ef7-41b4-b8af-648c2dd3c47f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockIssue/list"
                  },
                  "response": []
                }
              ],
              "id": "6ee59650-53ca-4b1d-ac31-22f52481ccd8"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "stockReceipt/list - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c4e96fd5-7a96-4719-b2c6-86e48f21a92d",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains warning 'DtoIn contains unsupported keys.'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "     pm.expect(pm.response.text()).to.include(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "0d276a9b-be57-4635-9842-5591fa06844a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"test\":\"test\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockIssue/list"
                  },
                  "response": []
                }
              ],
              "id": "1bf750e0-4b66-4b6a-8544-df462f3414cb"
            }
          ],
          "id": "915bc539-05d7-4954-aa32-376521250468"
        },
        {
          "name": "stockIssue/load",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "stockIssue/load",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ad9174a6-ed7f-4584-bbc3-d35fc86ef406",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains item in the list\",() => {\r",
                          "    pm.expect(jsonData.itemList).not.eql([]);\r",
                          "});\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "14823b56-9dfa-4910-ae02-2cc87c19e9b1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n \"id\":\"{{stockIssueID}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockIssue/load"
                  },
                  "response": []
                }
              ],
              "id": "8bf278a0-a6c9-47d4-b4d5-263487381821"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "stockIssue/load - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "64ffd4e1-ce7a-4363-84f9-85ab4728726c",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains warning 'DtoIn contains unsupported keys.'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "     pm.expect(pm.response.text()).to.include(\"DtoIn contains unsupported keys.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "b37acf8a-9c92-4528-8cd2-2d72b3f8dfe7",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n \"id\":\"{{stockIssueID}}\",\r\n \"test\":\"test\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockIssue/load"
                  },
                  "response": []
                },
                {
                  "name": "stockIssue/load -invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "33edbfce-e7a7-487e-a30b-40a87f1e38f8",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains error 'DtoIn is not valid.'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "     pm.expect(pm.response.text()).to.include(\"DtoIn is not valid.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "07af31c9-3fde-4e48-afc6-cf2c9c53383a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n \"idTest\":\"{{stockIssueID}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockIssue/load"
                  },
                  "response": []
                },
                {
                  "name": "stockIssue/load - stockIssueDoesNotExist",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "aa373fc7-2f3c-4de8-970c-28060bfdfc54",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains error 'stockIssueDoesNotExist'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/stockIssueDoesNotExist\");\r",
                          "     pm.expect(pm.response.text()).to.include(\"Stock issue does not exist.\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "eb81905a-0647-4a3c-8717-7b71a8190097",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n \"id\":\"610bb3922ec7ad001bdd3d4a\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/stockIssue/load"
                  },
                  "response": []
                }
              ],
              "id": "e01d825a-9dfc-441a-9a30-ae921be318af"
            }
          ],
          "id": "bc7e3b39-bfdc-41e1-b845-812037d8b69d"
        }
      ],
      "id": "849e2078-1ca8-4fe5-a59b-0e011aad2c16"
    },
    {
      "name": "shoppingCartAdd/remove items",
      "item": [
        {
          "name": "shoppingCart/addItem",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "shoppingCart/addItem",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b8c1ef33-7aee-490d-8a5d-b18f9f915067",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that product added to the list\",()=> {\r",
                          "    pm.expect(jsonData.productList).not.eql([]);\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"shoppingCartItemId\",jsonData.id);\r",
                          "pm.environment.set(\"revisionAddItem\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "93163d3d-5d57-41d7-81f3-4e80c9a0d7be",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"{{shoppingCartId}}\",\r\n\t\"productVariantId\": \"{{productVarianId}}\",\r\n\t\"quantity\": \"1\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/addItem"
                  },
                  "response": []
                }
              ],
              "id": "8cb5aab5-7ebb-4d35-a530-3eb90e03c7df"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "shoppingCart/addItem - unsupportedKeys and invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn contains unsupported keys\", () => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn is not valid\", () => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "6cc7994a-ea3e-4531-85f3-7619838d26fc"
                      }
                    }
                  ],
                  "id": "a42d9dda-20f7-4529-91d8-66138196cda8",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"test\": \"60e43b1dec8e8b001be9ffa0\",\r\n\t\"productVariantId\": \"60b4d17e8e3f17001b932199\",\r\n\t\"quantity\": \"1\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/addItem"
                  },
                  "response": []
                }
              ],
              "id": "d31f93a1-3b4e-4570-8ef5-ab9923229968"
            }
          ],
          "id": "4a26a1f5-627f-4d2d-808e-bb4626ba2216"
        },
        {
          "name": "shoppingCart/removeItem",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "shoppingCart/removeItem",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f4ef1113-7a04-433e-a0eb-d77d8ee09752",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "pm.test(\"Status code is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check for empty uuAppErrorMap\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that product is removed from shoppingCart\",() => {\r",
                          "    pm.expect(jsonData.productList).to.eql([]);\r",
                          "});\r",
                          "pm.environment.set(\"revisionAddItem\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "5d1e7362-9c22-4991-ae79-a5ec1df4bf9e",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"shoppingCartId\": \"{{shoppingCartItemId}}\",\r\n\t\"productVariantId\": \"{{productVarianId}}\",\r\n\t\"revision\": {{revisionAddItem}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/removeItem"
                  },
                  "response": []
                }
              ],
              "id": "c52b91f9-2c87-473a-9e48-a776ad0b0ddb"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "Pre-condition",
                  "item": [
                    {
                      "name": "shoppingCart/addItem",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "12433587-a541-4cce-bf40-5b3914b82d0d",
                            "exec": [
                              "let jsonData = JSON.parse(responseBody);\r",
                              "\r",
                              "pm.test(\"Status code is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "pm.test(\"Check for empty uuAppErrorMap\", function () {\r",
                              "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                              "});\r",
                              "pm.test(\"Check that product added to the list\",()=> {\r",
                              "    pm.expect(jsonData.productList).not.eql([]);\r",
                              "});\r",
                              "\r",
                              "pm.environment.set(\"shoppingCartItemId\",jsonData.id);\r",
                              "pm.environment.set(\"revisionAddItem\",jsonData.sys.rev);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "id": "15ea8cdb-89e7-4332-88e0-adaa060feb2f",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": {
                            "token": "{{token}}"
                          }
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n\t\"id\": \"{{shoppingCartId}}\",\r\n\t\"productVariantId\": \"{{productVarianId}}\",\r\n\t\"quantity\": \"1\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/addItem"
                      },
                      "response": []
                    }
                  ],
                  "id": "6921ee5f-189c-4953-b219-fdfcc41a4d82"
                },
                {
                  "name": "shoppingCart/removeItem  - invalid revision",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9489a36f-5aa5-4569-a850-8d16fa7cfc74",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is not empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).not.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that Revision is not valid\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidRevision\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "0c95000a-2277-40f9-b13f-7bba12a6f2a6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"shoppingCartId\": \"{{shoppingCartId}}\",\r\n\t\"productVariantId\": \"{{productVarianId}}\",\r\n\t\"revision\": 0\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/removeItem"
                  },
                  "response": []
                },
                {
                  "name": "shoppingCart/removeItem  - invalidDtoIn & unsupportedKey",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ed78d4c6-734f-41cf-812c-d84a7fc4f014",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is not empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).not.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains error message 'DtoIn is not valid' \",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains warnong message 'DtoIn contains unsupported keys.'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"DtoIn contains unsupported keys.\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "});\r",
                          "pm.test(\"Check that unsupportedKeysList contains keys.'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"paramMap\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"$.test\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "ffe41883-9fb6-4ae1-bf46-f5e9cc0778e4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"shoppingCartId\": \"{{shoppingCartId}}\",\r\n\t\"productVariantId\": \"{{productVarianId}}\",\r\n\t\"test\": 0\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/removeItem"
                  },
                  "response": []
                },
                {
                  "name": "shoppingCart/removeItem - shoppingCartWasNotFound",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "96a63050-9461-44de-8d5d-97d495a42924",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is not empty \",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).not.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains error 'Shopping cart does not exist'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/shoppingCartDoesNotExist\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"Shopping cart does not exist.\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "eea7de0e-af55-4aa0-ac98-05269367bd83",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"shoppingCartId\": \"60e43b1dec8e8b001be9ffa9\",\r\n\t\"productVariantId\": \"{{productVarianId}}\",\r\n\t\"revision\": {{revisionAddItem}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/removeItem"
                  },
                  "response": []
                },
                {
                  "name": "shoppingCart/removeItem - Product variant was not found",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "2d7d4229-d3bd-4ed9-b643-0473f0540e0f",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "pm.test(\"Status code is 400\", function () {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is not empty \",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).not.eql({});\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut contains error 'Product variant does not exist.'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/productVariantDoesNotExist\");\r",
                          "    pm.expect(pm.response.text()).to.include(\"Product variant does not exist.\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "df6d889b-7ba6-4339-8b1a-7ac972a8441d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"shoppingCartId\": \"{{shoppingCartId}}\",\r\n\t\"productVariantId\": \"60b4d17e8e3f17001b932191\",\r\n\t\"revision\": {{revisionAddItem}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/shoppingCart/removeItem"
                  },
                  "response": []
                }
              ],
              "id": "5f4dfdb7-b1a8-4783-9039-142ef17fbc68"
            }
          ],
          "id": "fa9ebfc3-02ef-4cce-bb4d-a1b4b146adcc"
        }
      ],
      "id": "69e9b339-c5c9-4a9b-82b1-0f6dc312b464"
    },
    {
      "name": "OrderFromCustomer",
      "item": [
        {
          "name": "orderFromCustomer/list",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "orderFromCustomer/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.environment.set(\"orderFromCustomerID\",jsonData.itemList[0].id);"
                        ],
                        "type": "text/javascript",
                        "id": "f7adf9d5-2f9f-44b1-92eb-f948e415a982"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "dd3fdd41-5a50-46af-b45d-927a6e0fdc16"
                      }
                    }
                  ],
                  "id": "7249618e-f48d-46f2-8082-e0fad6d2cd6c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\r\n    \"pageInfo\": {\r\n        \"pageIndex\": 0,\r\n        \"pageSize\": 100\r\n            }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/orderFromCustomer/list"
                  },
                  "response": []
                }
              ],
              "id": "2515eae6-847f-4257-97c6-ba1ae93ec9b0"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "orderFromCustomer/list  - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn contains unsupported keys warning\",() => {\r",
                          "    pm.expect(pm.response.text()).contain('/unsupportedKeys');\r",
                          "    pm.expect(pm.response.text()).contain('DtoIn contains unsupported keys.');\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "9cd00813-ffa2-429f-ab54-3e4ba10bc8bd"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "1c1efd73-8211-4f4c-b77d-e7ad9a15f86b"
                      }
                    }
                  ],
                  "id": "8bc1031d-1a00-435a-96f8-c7e05221ec83",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\r\n    \"pageInfo\": {\r\n        \"pageIndex\": 0,\r\n        \"test\": 100\r\n            }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/orderFromCustomer/list"
                  },
                  "response": []
                }
              ],
              "id": "80468c55-29dd-45d6-8ce0-e22a2797dada"
            }
          ],
          "id": "6981247e-ea87-4bf8-af7f-1544421007aa"
        },
        {
          "name": "orderFromCustomer/create",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "orderFromCustomer/create",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "12361937-6714-4249-bc25-636a2a6df994",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that order from customer is created\",()=>{\r",
                          "    pm.expect(jsonData.state).to.eql(\"created\");\r",
                          "});\r",
                          "\r",
                          "pm.environment.set(\"orderFromCustomerID\",jsonData.id);\r",
                          "pm.environment.set(\"deliveryNoteToCustomerID\",jsonData.deliveryNoteToCustomer.id);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "9d581b4a-d890-4776-ae6b-5acf06ac415f",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "27e9a6a1-fc11-4131-b656-1667b15927d2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"shoppingCartId\": \"616d3e86f9b2a90027e1033b\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/orderFromCustomer/create"
                  },
                  "response": []
                }
              ],
              "id": "52e627c6-b000-4990-903c-5c85db66d34a"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "orderFromCustomer/create - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains 'DtoIn contains unsupported keys.' warning\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "e62c8c20-f4b7-46b6-bb5c-8c6f72defd20"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "e6ff712f-d3ab-44e5-9606-9a309e69b5ae"
                      }
                    }
                  ],
                  "id": "ad12dc0d-5a05-4e2f-8c2c-ff9f9ff65421",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"unsupportedKeys\": \"{{shoppingCartId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/orderFromCustomer/create"
                  },
                  "response": []
                },
                {
                  "name": "orderFromCustomer/create - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn is not valid\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "715d6484-146c-4203-bbd0-9dc19b7f7ecd"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "e7bdb579-b284-4bcf-8110-a7999e2c1679"
                      }
                    }
                  ],
                  "id": "075b2079-4c88-4b24-bc59-2091187ff717",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"invalidDtoIn\": \"{{shoppingCartId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/orderFromCustomer/create"
                  },
                  "response": []
                }
              ],
              "id": "8e48ec6f-795e-4b55-af6e-e6728a3b18c9"
            }
          ],
          "id": "7fdbee44-6003-43d4-869b-3c56bccc3220"
        },
        {
          "name": "orderFromCustomer/load",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "orderFromCustomer/load",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "dfa5a007-8f9e-4509-b2f4-4382f9b5454b"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "153c2e4a-00a2-46fd-b2e5-97142954bbea"
                      }
                    }
                  ],
                  "id": "9f8ddfe2-5ada-4801-8bda-d58b084a211f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n \"id\":\"{{orderFromCustomerID}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/orderFromCustomer/load"
                  },
                  "response": []
                }
              ],
              "id": "c5bc04fb-063b-4eab-a1e1-b3b2519a1bff"
            }
          ],
          "id": "af960efa-e5a8-4073-a238-de073163851f"
        }
      ],
      "id": "1f6bdafe-b09a-4a5a-a36d-5b996cb79df1"
    },
    {
      "name": "DeliveryNoteToCustomer",
      "item": [
        {
          "name": "deliveryNoteToCustomer/list",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "deliveryNoteToCustomer/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "bb79d45b-6e69-497c-88b4-6180c0ff87ef"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "7f99ea94-138e-4c81-bbbd-39b0627e2ad9"
                      }
                    }
                  ],
                  "id": "b6e179df-bf15-4dd1-83ec-8ff77112a07b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/deliveryNoteToCustomer/list"
                  },
                  "response": []
                }
              ],
              "id": "4d5a6256-d748-4fdb-8942-f09319869b84"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "deliveryNoteToCustomer/list - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn contains unsupported keys warning\",() => {\r",
                          "    pm.expect(pm.response.text()).contain(\"/unsupportedKeys\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "4e602366-8f2a-4107-bf9b-1c4f9147d2e8"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "d5088b81-8a55-47f4-8185-9db4a6305556"
                      }
                    }
                  ],
                  "id": "f6a4ae54-e099-4b37-a255-65ac9131adaa",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"test\":\"test\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/deliveryNoteToCustomer/list"
                  },
                  "response": []
                }
              ],
              "id": "f668eeda-a509-467f-8b0d-cda1ed5b9aba"
            }
          ],
          "id": "6d9ec0a1-cbb6-4472-99d8-657ea37c82cb"
        },
        {
          "name": "deliveryNoteToCustomer/load",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "deliveryNoteToCustomer/load",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "pm.environment.set(\"deliveryNoteToCustomerRevision\",jsonData.sys.rev);"
                        ],
                        "type": "text/javascript",
                        "id": "d50c46bf-b684-4dd0-b094-59fb699f7ce4"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "8de41553-e5ab-4fa1-8b0c-edbb5b5661a6"
                      }
                    }
                  ],
                  "id": "57f4d225-540f-48f2-a1b1-c033bdb29279",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\":\"{{deliveryNoteToCustomerID}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/deliveryNoteToCustomer/load"
                  },
                  "response": []
                }
              ],
              "id": "80fba378-60d8-42f3-8220-a5acc1e67439"
            }
          ],
          "id": "f70ea682-f583-422b-8d88-0ea0381182d3"
        },
        {
          "name": "deliveryNoteToCustomer/confirm",
          "item": [
            {
              "name": "HDS",
              "item": [
                {
                  "name": "deliveryNoteToCustomer/confirm",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 200\",() => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Check that uuAppErrorMap is empty\",() => {\r",
                          "    pm.expect(jsonData.uuAppErrorMap).to.eql({});\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Check that delivery note is confirmetconfirmed\",() => {\r",
                          "    pm.expect(jsonData.id).to.eql(pm.environment.get(\"deliveryNoteToCustomerID\"));\r",
                          "    pm.expect(jsonData.state).to.eql(\"confirmed\");\r",
                          "\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "id": "f21f6161-69b8-4f27-a4de-35607cc9cb3c"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "5109b245-4352-499a-a0f4-cf9ddea471e2"
                      }
                    }
                  ],
                  "id": "70d3566d-7b74-4ae9-af7d-c2f6800667d1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"{{deliveryNoteToCustomerID}}\",\r\n    \"revision\":{{deliveryNoteToCustomerRevision}}\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/deliveryNoteToCustomer/confirm"
                  },
                  "response": []
                }
              ],
              "id": "ce27b1de-34a6-448f-bdb2-bb6ac3ffd064"
            },
            {
              "name": "ALT",
              "item": [
                {
                  "name": "deliveryNoteToCustomer/confirm - unsupportedKeys",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains 'DtoIn contains unsupported keys.' warning\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/unsupportedKeys\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "8cfe7a10-2b61-4a94-a398-5e42e76903c1"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "aebb4801-1ab8-4e5c-ac53-615293ebdc51"
                      }
                    }
                  ],
                  "id": "c330fd73-420d-47e3-9149-c7d293793a42",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"unsupportedKeys\": \"{{shoppingCartId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/deliveryNoteToCustomer/confirm"
                  },
                  "response": []
                },
                {
                  "name": "deliveryNoteToCustomer/confirm - invalidDtoIn",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that DtoIn is not valid\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/invalidDtoIn\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "8418c342-fb3d-45d4-9a9c-e3ec5000cf5a"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "id": "7df041c2-e0f9-48c5-a9f3-ca648ce1e398"
                      }
                    }
                  ],
                  "id": "abad7394-5567-4eb2-b713-7a3af3f3b141",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"invalidDtoIn\": \"{{shoppingCartId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/deliveryNoteToCustomer/confirm"
                  },
                  "response": []
                },
                {
                  "name": "deliveryNoteToCustomer/confirm - Delivery note to customer was not found",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "0c4e2fbd-a47e-40bb-85fb-c50a216a3c82",
                        "exec": [
                          "let jsonData = JSON.parse(responseBody);\r",
                          "\r",
                          "pm.test(\"Status code is 400\",() => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});\r",
                          "pm.test(\"Check that dtoOut is contains error 'Delivery note to customer does not exist'\",() => {\r",
                          "    pm.expect(pm.response.text()).to.include(\"/deliveryNoteToCustomerDoesNotExist\");\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eac1f93c-8fb4-406b-ad53-b9cd78b6039b",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "id": "f828e7ba-c159-414f-b250-c890eb067039",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{token}}"
                      }
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"id\": \"62d1b8abc3fb5f001bebabca\", \r\n\t\"revision\": 1\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{host}}/{{contextPath}}/{{awid}}/deliveryNoteToCustomer/confirm"
                  },
                  "response": []
                }
              ],
              "id": "479f1064-5bc7-4137-8154-5237770c1fb6"
            }
          ],
          "id": "09624de4-fa29-46af-ab7b-b8e0416d8d93"
        }
      ],
      "id": "e6a93a06-1f27-4665-9947-8d9ece541aed"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ],
        "id": "5760fd11-7299-4e25-bdb1-e6bd33904caf"
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ],
        "id": "14732b90-25b8-4326-a6a3-92cd097abe65"
      }
    }
  ]
}